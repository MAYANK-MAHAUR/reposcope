[{"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\clean.py", "content": "import shutil\nimport os\nimport glob\n\ndef clean():\n    \"\"\"Clean up build products and temporary files.\"\"\"\n    patterns_to_remove = [\n        'build/',\n        'dist/',\n        '**/*.egg-info/',\n        '__pycache__/',\n        '*.pyc',\n        '*.pyo',\n        '*.pyd',\n        '.pytest_cache/',\n        '.coverage',\n        'htmlcov/',\n        '.tox/',\n        '.mypy_cache/',\n    ]\n\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    venv_dir = os.path.join(current_dir, '.venv')\n    \n ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\clean.py", "content": "   for pattern in patterns_to_remove:\n        # Handle both directories and file patterns\n        if pattern.endswith('/'):\n            # It's a directory pattern\n            # Use glob to find all matching directories\n            full_pattern = os.path.join(current_dir, '**', pattern[:-1])\n            matching_dirs = glob.glob(full_pattern, recursive=True)\n            for dir_path in matching_dirs:\n                # Skip anything in the virtual environment directory\n                if venv_dir ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\clean.py", "content": "in dir_path:\n                    continue\n                if os.path.exists(dir_path):\n                    print(f\"Removing directory: {dir_path}\")\n                    shutil.rmtree(dir_path, ignore_errors=True)\n        else:\n            # It's a file pattern\n            full_pattern = os.path.join(current_dir, '**', pattern)\n            matching_files = glob.glob(full_pattern, recursive=True)\n            for file_path in matching_files:\n                # Skip anything in the virtual environment", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\clean.py", "content": " directory\n                if venv_dir in file_path:\n                    continue\n                if os.path.exists(file_path):\n                    print(f\"Removing file: {file_path}\")\n                    os.remove(file_path)\n\nif __name__ == \"__main__\":\n    clean() ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "<!-- Sentient Banner -->\n<p align=\"center\">\n  <img src=\"banner.png\"/>\n</p>\n\n<!-- Socials -->\n<p align=\"center\">\n      <a href=\"https://sentient.xyz/\" target=\"_blank\" style=\"margin: 2px;\">\n    <img alt=\"Homepage\" src=\"https://img.shields.io/badge/Website-Sentient.xyz-%23EAEAEA?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIzNDEuMzMzIiBoZWlnaHQ9IjM0MS4zMzMiIHZlcnNpb249IjEuMCIgdmlld0JveD0iMCAwIDI1NiAyNTYiPjxwYXRoIGQ9Ik0xMzIuNSAyOC40Yy0xLjUgMi", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "4yLTEuMiAzLjkgNC45IDI3LjIgMy41IDEzLjcgOC41IDMzIDExLjEgNDIuOSAyLjYgOS45IDUuMyAxOC42IDYgMTkuNCAzLjIgMy4zIDExLjctLjggMTMuMS02LjQuNS0xLjktMTcuMS03Mi0xOS43LTc4LjYtMS4yLTMtNy41LTYuOS0xMS4zLTYuOS0xLjYgMC0zLjEuOS00LjEgMi40ek0xMTAgMzBjLTEuMSAxLjEtMiAzLjEtMiA0LjVzLjkgMy40IDIgNC41IDMuMSAyIDQuNSAyIDMuNC0uOSA0LjUtMiAyLTMuMSAyLTQuNS0uOS0zLjQtMi00LjUtMy4xLTItNC41LTItMy40LjktNC41IDJ6TTgxLjUgNDYuMWMtMi4yIDEuMi00LjYgMi44LTUuMiAzLjctMS44IDIuMy0xLjYgNS42LjUgNy40IDEuMyAxLjIgMzIuMSAxMC4yIDQ1LjQgMTMuMyAzIC44IDYuOC0yLj", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "IgNi44LTUuMyAwLTMuNi0yLjItOS4yLTMuOS0xMC4xQzEyMy41IDU0LjIgODcuMiA0NCA4NiA0NGMtLjMuMS0yLjMgMS00LjUgMi4xek0xNjUgNDZjLTEuMSAxLjEtMiAyLjUtMiAzLjIgMCAyLjggMTEuMyA0NC41IDEyLjYgNDYuNS45IDEuNSAyLjQgMi4zIDQuMiAyLjMgMy44IDAgOS4yLTUuNiA5LjItOS40IDAtMS41LTIuMS0xMC45LTQuNy0yMC44bC00LjctMTguMS00LjUtMi44Yy01LjMtMy40LTcuNC0zLjYtMTAuMS0uOXpNNDguNyA2NS4xYy03LjcgNC4xLTYuOSAxMC43IDEuNSAxMyAyLjQuNiAyMS40IDUuOCA0Mi4yIDExLjYgMjIuOCA2LjIgMzguOSAxMC4yIDQwLjMgOS44IDMuNS0uOCA0LjYtMy44IDMuMi04LjgtMS41LTUuNy0yLjMtNi41LTguMy", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "04LjJDOTQuMiA3My4xIDU2LjYgNjMgNTQuOCA2M2MtMS4zLjEtNCAxLTYuMSAyLjF6TTE5OC4yIDY0LjdjLTMuMSAyLjgtMy41IDUuNi0xLjEgOC42IDQgNS4xIDEwLjkgMi41IDEwLjktNC4xIDAtNS4zLTUuOC03LjktOS44LTQuNXpNMTgxLjggMTEzLjFjLTI3IDI2LjQtMzEuOCAzMS41LTMxLjggMzMuOSAwIDEuNi43IDMuNSAxLjUgNC40IDEuNyAxLjcgNy4xIDMgMTAuMiAyLjQgMi4xLS4zIDU2LjktNTMuNCA1OS01Ny4xIDEuNy0zLjEgMS42LTkuOC0uMy0xMi41LTMuNi01LjEtNC45LTQuMi0zOC42IDI4Ljl6TTM2LjYgODguMWMtNSA0LTIuNCAxMC45IDQuMiAxMC45IDMuMyAwIDYuMi0yLjkgNi4yLTYuMyAwLTIuMS00LjMtNi43LTYuMy02LjctLjggMC", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "0yLjYuOS00LjEgMi4xek02My40IDk0LjVjLTEuNi43LTguOSA3LjMtMTYuMSAxNC43TDM0IDEyMi43djUuNmMwIDYuMyAxLjYgOC43IDUuOSA4LjcgMi4xIDAgNi0zLjQgMTkuOS0xNy4zIDkuNS05LjUgMTcuMi0xOCAxNy4yLTE4LjkgMC00LjctOC40LTguNi0xMy42LTYuM3pNNjIuOSAxMzAuNiAzNCAxNTkuNXY1LjZjMCA2LjIgMS44IDguOSA2IDguOSAzLjIgMCA2Ni02Mi40IDY2LTY1LjYgMC0zLjMtMy41LTUuNi05LjEtNi4ybC01LS41LTI5IDI4Ljl6TTE5Ni4zIDEzNS4yYy05IDktMTYuNiAxNy4zLTE2LjkgMTguNS0xLjMgNS4xIDIuNiA4LjMgMTAgOC4zIDIuOCAwIDUuMi0yIDE3LjktMTQuOCAxNC41LTE0LjcgMTQuNy0xNC45IDE0LjctMTkuMyAwLT", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "UuOC0yLjItOC45LTYuMi04LjktMi42IDAtNS40IDIuMy0xOS41IDE2LjJ6TTk2IDEzNi44Yy0yLjkuOS04IDYuNi04IDkgMCAxLjMgMi45IDEzLjQgNi40IDI3IDMuNiAxMy42IDcuOSAzMC4zIDkuNyAzNy4yIDEuNyA2LjkgMy42IDEzLjMgNC4xIDE0LjIuNSAxIDIuNiAyLjcgNC44IDMuOCA2LjggMy41IDExIDIuMyAxMS0zLjIgMC0zLTIwLjYtODMuMS0yMi4xLTg1LjktLjktMS45LTMuNi0yLjgtNS45LTIuMXpNMTIwLjUgMTU4LjRjLTEuOSAyLjktMS4yIDguNSAxLjQgMTEuNiAxLjEgMS40IDEyLjEgNC45IDM5LjYgMTIuNSAyMC45IDUuOCAzOC44IDEwLjUgMzkuOCAxMC41czMuNi0xIDUuNy0yLjJjOC4xLTQuNyA3LjEtMTAuNi0yLjMtMTMuMi0yOC4yLT", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "guMS03OC41LTIxLjYtODAuMy0yMS42LTEuNCAwLTMgMS0zLjkgMi40ek0yMTAuNyAxNTguOGMtMS44IDEuOS0yLjIgNS45LS45IDcuOCAxLjUgMi4zIDUgMy40IDcuNiAyLjQgNi40LTIuNCA1LjMtMTEuMi0xLjUtMTEuOC0yLjQtLjItNCAuMy01LjIgMS42ek02OS42IDE2MmMtMiAyLjItMy42IDQuMy0zLjYgNC44LjEgMi42IDEwLjEgMzguNiAxMS4xIDM5LjkgMi4yIDIuNiA5IDUuNSAxMS41IDQuOSA1LTEuMyA0LjktMy0xLjUtMjcuNy0zLjMtMTIuNy02LjUtMjMuNy03LjItMjQuNS0yLjItMi43LTYuNC0xLjctMTAuMyAyLjZ6TTQ5LjYgMTgxLjVjLTIuNCAyLjUtMi45IDUuNC0xLjIgOEM1MiAxOTUgNjAgMTkzIDYwIDE4Ni42YzAtMS45LS44LTQtMS44LT", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "QuOS0yLjMtMi4xLTYuNi0yLjItOC42LS4yek0xMjguNSAxODdjLTIuMyAyLjUtMS4zIDEwLjMgMS42IDEyLjggMi4yIDEuOSAzNC44IDExLjIgMzkuNCAxMS4yIDMuNiAwIDEwLjEtNC4xIDExLTcgLjYtMS45LTEuNy03LTMuMS03LS4yIDAtMTAuMy0yLjctMjIuMy02cy0yMi41LTYtMjMuMy02Yy0uOCAwLTIuMy45LTMuMyAyek0xMzYuNyAyMTYuOGMtMy40IDMuOC0xLjUgOS41IDMuNSAxMC43IDMuOSAxIDguMy0zLjQgNy4zLTcuMy0xLjItNS4xLTcuNS03LjEtMTAuOC0zLjR6Ii8%2BPC9zdmc%2B&link=https%3A%2F%2Fhuggingface.co%2FSentientagi\"/>\n  </a>\n    <!-- Twitter -->\n    <a href=\"https://x.com/SentientAGI\">\n ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "       <img alt=\"Twitter Follow\" src=\"https://img.shields.io/badge/Twitter-SentientAGI-white?logo=x\"/>\n    </a>\n    <!-- Discord -->\n    <a href=\"https://discord.gg/sentientfoundation\">\n        <img alt=\"Discord\" src=\"https://img.shields.io/badge/Discord-SentientAGI-7289da?logo=discord&logoColor=white&color=7289da\"/>\n    </a>\n    <!-- Hugging face -->\n    <a href=\"https://huggingface.co/Sentientagi\">\n        <img src=\"https://img.shields.io/badge/Hugging_Face-SentientAGI-yellow?style=sociak&logo", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "=huggingface\"/>\n    </a>\n</p>\n\n<!-- PyPI Package Info -->\n<p align=\"center\">\n    <!-- Release -->\n    <a href=\"https://pypi.org/project/sentient-agent-framework/\">\n        <img src=\"https://img.shields.io/pypi/v/sentient-agent-framework\">\n    </a>\n    <!-- License -->\n    <a href=\"https://pypi.org/project/sentient-agent-framework/\">\n        <img alt=\"License\" src=\"https://img.shields.io/pypi/dm/sentient-agent-framework\">\n    </a>\n</p>\n\n\n<h1 align=\"center\">Sentient Agent Framework</h1>\n\n> [!WARNI", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "NG]\n> **This python package is currently in beta and will likely change. It is not yet ready for production use.**\n\n> [!NOTE]\n> **Examples of agents that use this framework/package can be found [here](https://github.com/sentient-agi/Sentient-Agent-Framework-Examples). A client for testing agents built with this framework is available [here](https://github.com/sentient-agi/Sentient-Agent-Client).**\n\nThis python package provides an agent framework that can be used to build agents that serve Sentie", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "nt Chat events (JSON, text, streams, etc.). These events are rendered in Sentient Chat to provide a richer user experience. This particularly useful when you'd like to show the agent's work while the response is being generated, rather than having the user wait for the entire final response. \n\n## Installation\n```bash\npip install sentient-agent-framework\n```\n\n## Usage\nThe simplest way to use this framework is to import and use the `AbstractAgent` class and the `DefaultServer` class.\n\n#### Abstrac", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "tAgent\nThe `AbstractAgent` class is lightweight and extensible. To use it, simply subclass the class and implement the `assist()` method. Use the `ResponseHandler` object passed to the `assist()` method to emit events to the client.\n\n#### DefaultServer\nThe `DefaultServer` class is designed to be used with the `AbstractAgent` class. A concrete implementation of the `AbstractAgent` class is passed into the `DefaultServer` constructor. The `DefaultServer` provides SSE server with `/assist` endpoint", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": " and automatically streams events emitted in the `assist()` method to the client.\n\n> [!NOTE]  \n> The snippet below comes from the [Sentient Agent Framework Examples](https://github.com/sentient-agi/Sentient-Agent-Framework-Examples) repository.\n\n#### Example\n```python\nimport logging\nimport os\nfrom dotenv import load_dotenv\nfrom src.search_agent.providers.model_provider import ModelProvider\nfrom src.search_agent.providers.search_provider import SearchProvider\nfrom sentient_agent_framework import ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "(\n    AbstractAgent,\n    DefaultServer,\n    Session,\n    Query,\n    ResponseHandler)\nfrom typing import AsyncIterator\n\n\nload_dotenv()\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n\nclass SearchAgent(AbstractAgent):\n    def __init__(\n            self,\n            name: str\n    ):\n        super().__init__(name)\n\n        model_api_key = os.getenv(\"MODEL_API_KEY\")\n        if not model_api_key:\n            raise ValueError(\"MODEL_API_KEY is not set\")\n        self._model_provider", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": " = ModelProvider(api_key=model_api_key)\n\n        search_api_key = os.getenv(\"TAVILY_API_KEY\")\n        if not search_api_key:\n            raise ValueError(\"TAVILY_API_KEY is not set\") \n        self._search_provider = SearchProvider(api_key=search_api_key)\n\n\n    # Implement the assist method as required by the AbstractAgent class\n    async def assist(\n            self,\n            session: Session,\n            query: Query,\n            response_handler: ResponseHandler\n    ):\n        \"\"\"Search the", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": " internet for information.\"\"\"\n        # Search for information\n        await response_handler.emit_text_block(\n            \"SEARCH\", \"Searching internet for results...\"\n        )\n        search_results = await self._search_provider.search(query.prompt)\n        if len(search_results[\"results\"]) > 0:\n            # Use response handler to emit JSON to the client\n            await response_handler.emit_json(\n                \"SOURCES\", {\"results\": search_results[\"results\"]}\n            )\n        if l", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "en(search_results[\"images\"]) > 0:\n            # Use response handler to emit JSON to the client\n            await response_handler.emit_json(\n                \"IMAGES\", {\"images\": search_results[\"images\"]}\n            )\n\n        # Process search results\n        # Use response handler to create a text stream to stream the final \n        # response to the client\n        final_response_stream = response_handler.create_text_stream(\n            \"FINAL_RESPONSE\"\n            )\n        async for chunk in", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": " self.__process_search_results(search_results[\"results\"]):\n            # Use the text stream to emit chunks of the final response to the client\n            await final_response_stream.emit_chunk(chunk)\n        # Mark the text stream as complete\n        await final_response_stream.complete()\n        # Mark the response as complete\n        await response_handler.complete()\n    \n\n    async def __process_search_results(\n            self, \n            search_results: dict\n    ) -> AsyncIterator[str]:", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "\n        \"\"\"Process the search results.\"\"\"\n        process_search_results_query = f\"Summarise the following search results: {search_results}\"\n        async for chunk in self._model_provider.query_stream(process_search_results_query):\n            yield chunk\n\n\nif __name__ == \"__main__\":\n    # Create an instance of a SearchAgent\n    agent = SearchAgent(name=\"Search Agent\")\n    # Create a server to handle requests to the agent\n    server = DefaultServer(agent)\n    # Run the server\n    server.run()\n", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "```\n\n\n## Emitting events\nWhether using the `AbstractAgent` or the `DefaultResponseHandler`, a `ResponseHandler` is created for every agent query and is used to emit events to the client. \n\n#### Emitting text events\nText events are used to send single, complete messages to the client:\n```python\nawait response_handler.emit_text_block(\n    \"PLAN\", \"Rephrasing user query...\"\n)\n```\n\n#### Emitting JSON events\nJSON events are used to send JSON objects to the client:\n```python\nawait response_handler.emi", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "t_json(\n    \"SOURCES\", {\"results\": search_results[\"results\"]}\n)\n```\n\n#### Emitting error events\nError events are used to send error messages to the client:\n```python\nawait response_handler.emit_error(\n    \"ERROR\", {\"message\": \"An error occurred\"}\n)\n```\n\n#### Completing a response\nAt the end of a response, `response_handler.complete()` is called to signal the end of the response (this will emit a `DoneEvent` using the `Hook`):\n```python\nawait response_handler.complete()\n```\n\n#### Emitting a strea", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "m of text chunks\nTo stream a longer response one chunk at a time, use the `response_handler.create_text_stream` method. This returns a `StreamEventEmitter` that can be used to stream text to the client using the `emit_chunk` method:\n```python\nfinal_response_stream = response_handler.create_text_stream(\n    \"FINAL_RESPONSE\"\n    )\nfor chunk in self.__process_search_results(search_results[\"results\"]):\n    await final_response_stream.emit_chunk(chunk)\n```\n\n#### Completing a stream\nAt the end of the ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\README.md", "content": "stream, `final_response_stream.complete()` is called to signal the end of the stream (this will emit a `TextChunkEvent` with `is_complete=True`):\n```python\nawait final_response_stream.complete()\n```\n\n## Documentation\n- [Interface Documentation](./src/sentient_agent_framework/interface/README.md)\n- [Implementation Documentation](./src/sentient_agent_framework/implementation/README.md)", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\requirements.txt", "content": "annotated-types==0.7.0\nanyio==4.9.0\nclick==8.1.8\ncuid2==2.0.1\nfastapi==0.115.12\nh11==0.14.0\nidna==3.10\npydantic==2.11.3\npydantic_core==2.33.1\npython-ulid==3.0.0\nsniffio==1.3.1\nstarlette==0.46.1\ntyping-inspection==0.4.0\ntyping_extensions==4.13.2\nuvicorn==0.34.0\n", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\__init__.py", "content": "from sentient_agent_framework.implementation.default_hook import DefaultHook\nfrom sentient_agent_framework.implementation.default_response_handler import DefaultResponseHandler\nfrom sentient_agent_framework.implementation.default_server import DefaultServer\nfrom sentient_agent_framework.interface.agent import AbstractAgent, Session\nfrom sentient_agent_framework.interface.request import Query\nfrom sentient_agent_framework.interface.response_handler import ResponseHandler", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_hook.py", "content": "import asyncio\nfrom sentient_agent_framework.implementation.default_id_generator import DefaultIdGenerator\nfrom sentient_agent_framework.interface.events import (\n    BaseEvent,\n    Event\n)\nfrom typing import cast\n\n\nclass DefaultHook:\n    \"\"\"\n    An async event queue hook that collects events in a queue.\n    \n    Default implementation of the Hook protocl.\n    \"\"\"\n\n    def __init__(\n            self,\n            queue: asyncio.Queue[Event],\n            id_generator: DefaultIdGenerator | None = N", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_hook.py", "content": "one,\n            timeout_ms: int | None = None\n    ):\n        self._queue = queue\n        self._id_generator = id_generator or DefaultIdGenerator()\n        self._timeout_secs = timeout_ms / 1000 if timeout_ms else None\n\n\n    async def emit(self, event: Event) -> None:\n        \"\"\"Add event to queue.\"\"\"\n        \n        # Make sure that the event id is greater than the previous one.\n        event = cast(BaseEvent, event)\n        event.id = await self._id_generator.get_next_id(event.id)\n\n        # ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_hook.py", "content": "Add the event to the queue, block till there is a free slot if a\n        # timeout is not specified.\n        if self._timeout_secs is None:\n            # Add to queue, wait if necessary.\n            await self._queue.put(event)\n            return\n        \n        # Add element to queue with a timeout.\n        await asyncio.wait_for(\n            self._queue.put(event),\n            self._timeout_secs\n        )", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_id_generator.py", "content": "from asyncio import Lock\nfrom ulid import ULID\n\n\nclass DefaultIdGenerator:\n    \"\"\"\n    ULID generator that tracks the latest identifier and ensures that the\n    next identifier is always greater than the latest.\n    \"\"\"\n    \n    def __init__(\n        self, \n        seed_id: ULID | None = None,\n    ):\n        self._latest_id = seed_id or ULID()\n        self._lock = Lock()\n\n\n    async def get_next_id(\n            self,\n            new_id: ULID | None = None,\n            offset: int = 10\n    ) -> U", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_id_generator.py", "content": "LID:\n        \"\"\"\n        Generate the next identifier.\n\n        Args:\n            new_id: The user suggested new identifier to use. If one is \n            specified, we will try to use this identifier provided it is\n            greater than the latest one.  If not specified, we create a\n            new ULID.\n            offset: The offset in milliseconds that needs to be added to\n            the timestamp of the latest identifier if the new one is less\n            than or equal to it.\n        \"\"", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_id_generator.py", "content": "\"\n\n        # If the user has specified a new identifier, use that, else we\n        # create a new one.\n        resolved_new_id = new_id or ULID()\n\n        async with self._lock:\n            if resolved_new_id <= self._latest_id:\n                # Extract the timestamp from the previous event identifier\n                # and add the offset to it.\n                resolved_new_id = ULID.from_timestamp(\n                    self._latest_id.milliseconds + offset\n                )\n            self._lat", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_id_generator.py", "content": "est_id = resolved_new_id\n            \n        return resolved_new_id", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "from __future__ import annotations\nimport inspect\nimport json\nfrom cuid2 import Cuid\nfrom functools import wraps\nfrom sentient_agent_framework.interface.exceptions import (\n    AgentError,\n    ResponseStreamClosedError\n)\nfrom sentient_agent_framework.interface.events import (\n    DocumentEvent,\n    DoneEvent,\n    ErrorContent,\n    ErrorEvent,\n    StreamEvent,\n    TextBlockEvent,\n    DEFAULT_ERROR_CODE\n)\nfrom sentient_agent_framework.interface.hook import Hook\nfrom sentient_agent_framework.interf", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "ace.identity import Identity\nfrom sentient_agent_framework.interface.response_handler import StreamEventEmitter\nfrom sentient_agent_framework.implementation.default_text_stream import DefaultTextStream\nfrom typing import (\n    Any,\n    Callable,\n    Mapping,\n    Optional,\n    Union\n)\n\n\nclass DefaultResponseHandler:\n    \"\"\"\n    Default implementation of the ResponseHandler protocol.\n    \"\"\"\n\n    def __init__(\n        self,\n        source: Identity,\n        hook: Hook\n    ):\n        self._source =", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": " source\n        self._hook = hook\n        self._cuid_generator: Cuid = Cuid(length=10)\n        self._streams: dict[str, StreamEventEmitter] = {}\n        self._is_complete = False\n\n\n    @staticmethod\n    def __verify_response_stream_is_open(func: Callable):\n        \"\"\"Check if the response stream is open.\"\"\"\n\n        is_async_def = inspect.iscoroutinefunction(func)\n\n        @wraps(func)\n        async def async_wrapper(\n                handler: DefaultResponseHandler,\n                *args, **kwar", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "gs\n        ):\n            if handler.is_complete:\n                raise ResponseStreamClosedError(\n                    \"Cannot send to a completed response handler.\"\n                )\n            return await func(handler, *args, **kwargs)\n\n        @wraps(func)\n        def sync_wrapper(\n                handler: DefaultResponseHandler,\n                *args, **kwargs\n        ):\n            if handler.is_complete:\n                raise RuntimeError(\n                    \"Cannot send to a completed ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "response handler.\"\n                )\n            return func(handler, *args, **kwargs)\n        return async_wrapper if is_async_def else sync_wrapper\n    \n\n    @__verify_response_stream_is_open\n    async def respond(\n        self,\n        event_name: str,\n        response: Union[Mapping[Any, Any] | str]\n    ) -> None:\n        \"\"\"Syncronus function to emit a single atomic event as a complete response.\"\"\"\n\n        event: TextBlockEvent | DocumentEvent | None = None\n        match response:\n        ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "    case str():\n                event = TextBlockEvent(\n                    source=self._source.id,\n                    event_name=event_name,\n                    content=response\n                )\n            case _:\n                try:\n                    json.dumps(response)\n                except TypeError as e:\n                    raise AgentError(\n                        \"Response content must be JSON serializable\"\n                    ) from e\n                event = DocumentEvent(\n      ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "              source=self._source.id,\n                    event_name=event_name,\n                    content=response\n                )\n        await self.__emit_event(event)\n        await self.complete()\n\n    \n    @__verify_response_stream_is_open\n    async def __send_event_chunk(\n        self, \n        chunk: StreamEvent\n    ) -> None:\n        \"\"\"Emit a chunk of text to a stream.\"\"\"\n\n        await self.__emit_event(chunk)\n\n    \n    @__verify_response_stream_is_open\n    async def emit_json(\n   ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "     self,\n        event_name: str,\n        data: Mapping[Any, Any]\n    ) -> None:\n        \"\"\"Emit a single atomic JSON response.\"\"\"\n\n        try:\n            json.dumps(data)\n        except TypeError as e:\n            raise AgentError(\n                \"Response content must be JSON serializable\"\n            ) from e\n        event = DocumentEvent(\n            source=self._source.id,\n            event_name=event_name,\n            content=data\n        )\n        await self.__emit_event(event)\n\n    ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "\n    @__verify_response_stream_is_open\n    async def emit_text_block(\n        self, \n        event_name: str, \n        content: str\n    ) -> None:\n        \"\"\"Emit a single atomic text block response.\"\"\"\n\n        event = TextBlockEvent(\n            source=self._source.id,\n            event_name=event_name,\n            content=content\n        )\n        await self.__emit_event(event)\n\n\n    @__verify_response_stream_is_open\n    def create_text_stream(\n        self,\n        event_name: str\n    ) -> D", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "efaultTextStream:\n        \"\"\"Create and return a new TextStream object.\"\"\"\n\n        stream_id = self._cuid_generator.generate()\n        stream = DefaultTextStream(self._source, event_name, stream_id, self._hook)\n        self._streams[stream_id] = stream\n        return stream\n\n    \n    @__verify_response_stream_is_open\n    async def emit_error(\n        self,\n        error_message: str,\n        error_code: int = DEFAULT_ERROR_CODE,\n        details: Optional[Mapping[str, Any]] = None\n    ) -> None:", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "\n        \"\"\"Emit an error event.\"\"\"\n\n        error_content = ErrorContent(\n            error_message=error_message,\n            error_code=error_code,\n            details=details\n        )\n        event = ErrorEvent(\n            source=self._source.id,\n            event_name=\"error\",\n            content=error_content\n        )\n        await self.__emit_event(event)\n\n\n    @property\n    def is_complete(self) -> bool:\n        \"\"\"Check if the response is complete.\"\"\"\n\n        return self._is_complet", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "e\n\n\n    async def complete(self) -> None:\n        \"\"\"Mark all streams as complete and the response as complete.\"\"\"\n        # Nop if already complete.\n        if self.is_complete:\n            return\n        # Mark all streams as complete.\n        for stream in self._streams.values():\n            if not stream.is_complete:\n                await stream.complete()\n        self._is_complete = True\n        await self.__emit_event(\n            DoneEvent(source=self._source.id))\n\n\n    async def __emit_e", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_response_handler.py", "content": "vent(self, event) -> None:\n        \"\"\"Internal method to emit events using hook.\"\"\"\n\n        await self._hook.emit(event)", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_server.py", "content": "import asyncio\nimport uvicorn\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\nfrom sentient_agent_framework.implementation.default_hook import DefaultHook\nfrom sentient_agent_framework.implementation.default_response_handler import DefaultResponseHandler\nfrom sentient_agent_framework.implementation.default_session import DefaultSession\nfrom sentient_agent_framework.interface.agent import AbstractAgent\nfrom sentient_agent_framework.interface.events import DoneEvent\nfro", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_server.py", "content": "m sentient_agent_framework.interface.identity import Identity\nfrom sentient_agent_framework.interface.request import Request\n\n\nclass DefaultServer():\n    \"\"\"\n    FastAPI server that streams agent output to the client via Server-Sent Events.\n    \"\"\"\n\n    def __init__(\n            self,\n            agent: AbstractAgent\n        ):\n        self._agent = agent\n\n        # Create FastAPI app\n        self._app = FastAPI()\n        self._app.post('/assist')(self.assist_endpoint)\n\n\n    def run(\n           ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_server.py", "content": " self, \n            host: str = \"0.0.0.0\",\n            port: int = 8000\n        ):\n        \"\"\"Start the FastAPI server\"\"\"\n\n        # Separate running the server from setting up the server because \n        # running the server is a blocking operation that should only happen \n        # when everything else is ready.\n        uvicorn.run(\n            self._app,\n            host=host, \n            port=port\n        )\n\n\n    async def __stream_agent_output(self, request):\n        \"\"\"Yield agent output ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_server.py", "content": "as SSE events.\"\"\"\n\n        # Get session from request\n        session = DefaultSession(request.session)\n\n        # Get identity using processor id from session\n        identity = Identity(id=session.processor_id, name=self._agent.name)\n\n        # Create response queue\n        response_queue = asyncio.Queue()\n\n        # Create hook\n        hook = DefaultHook(response_queue)\n\n        # Create response handler\n        response_handler = DefaultResponseHandler(identity, hook)\n\n        # Run the agen", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_server.py", "content": "t's assist function\n        asyncio.create_task(self._agent.assist(session, request.query, response_handler))\n        \n        # Stream the response handler events\n        while True:\n            event = await response_queue.get()\n            yield f\"event: {event.event_name}\\n\"\n            yield f\"data: {event.model_dump_json()}\\n\\n\"\n            response_queue.task_done()\n            if type(event) == DoneEvent:\n                break\n\n\n    async def assist_endpoint(self, request: Request):\n    ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_server.py", "content": "    \"\"\"Endpoint that streams agent output to client as SSE events.\"\"\"\n        \n        return StreamingResponse(self.__stream_agent_output(request), media_type=\"text/event-stream\")", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_session.py", "content": "from sentient_agent_framework.interface.request import SessionObject\nfrom sentient_agent_framework.interface.session import Interaction\nfrom typing import AsyncIterable\nfrom ulid import ULID\n\n\nclass DefaultSession:\n    \"\"\"\n    Default implementation of the Session interface.\n\n    Simply returns the appropriate values from the session object.\n    \"\"\"\n\n    def __init__(self, session_object: SessionObject):\n        self._session_object = session_object\n\n\n    @property\n    def processor_id(self) -> ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_session.py", "content": "str:\n        return self._session_object.processor_id\n\n\n    @property\n    def activity_id(self) -> ULID:\n        return self._session_object.activity_id\n\n\n    @property\n    def request_id(self) -> ULID:\n        return self._session_object.request_id\n\n\n    def get_interactions(self) -> AsyncIterable[Interaction]:\n        return self._session_object.interactions\n", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_text_stream.py", "content": "from __future__ import annotations\nfrom sentient_agent_framework.interface.events import TextChunkEvent\nfrom sentient_agent_framework.interface.exceptions import TextStreamClosedError\nfrom sentient_agent_framework.interface.hook import Hook\nfrom sentient_agent_framework.interface.identity import Identity\nfrom sentient_agent_framework.interface.response_handler import StreamEventEmitter\n\n\nclass DefaultTextStream(StreamEventEmitter[str]):\n    \"\"\"\n    Default implementation of the TextStream protoc", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_text_stream.py", "content": "ol.\n    \"\"\"\n\n    def __init__(\n        self,\n        event_source: Identity,\n        event_name: str,\n        stream_id: str,\n        hook: Hook\n    ):\n        self._event_source = event_source\n        self._event_name = event_name\n        self._stream_id = stream_id\n        self._hook = hook\n        self._is_complete = False\n\n\n    async def emit_chunk(\n        self, \n        chunk: str\n    ) -> DefaultTextStream:\n        \"\"\"Send a chunk of text to stream.\"\"\"\n\n        if self._is_complete:\n     ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_text_stream.py", "content": "       raise TextStreamClosedError(\n                f\"Cannot emit chunk to closed stream {self._stream_id}.\"\n            )\n        event = TextChunkEvent(\n            source=self._event_source.id,\n            event_name=self._event_name,\n            stream_id=self._stream_id,\n            is_complete=False,\n            content=chunk\n        )\n        await self._hook.emit(event)\n        return self\n\n\n    async def complete(self) -> None:\n        \"\"\"Mark stream as complete.\"\"\"\n\n        event = Tex", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_text_stream.py", "content": "tChunkEvent(\n            source=self._event_source.id,\n            event_name=self._event_name,\n            stream_id=self._stream_id,\n            is_complete=True,\n            content=\" \"\n        )\n        await self._hook.emit(event)\n        self._is_complete = True\n\n\n    @property\n    def id(self) -> str:\n        \"\"\"Get stream ID.\"\"\"\n\n        return self._stream_id\n\n\n    @property\n    def is_complete(self) -> bool:\n        \"\"\"Check if stream is complete.\"\"\"\n        \n        return self._is_co", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\default_text_stream.py", "content": "mplete", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "## Architecture\n\n> [!NOTE]  \n> The class diagram below omits the `DefaultIdGenerator` class, which is used by the `DefaultHook` class to generate unique IDs for events.\n\n```mermaid\nclassDiagram\n    class AbstractAgent {\n        -str name\n        +assist(Session, Query, ResponseHandler)\n    }\n\n    class DefaultServer {\n        -AbstractAgent _agent\n        -Flask _app\n        +run(debug)\n        +assist_endpoint()\n        -__stream_agent_output(request_json)\n    }\n\n    class DefaultSession {\n    ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "    -SessionObject _session_object\n        +processor_id\n        +activity_id\n        +request_id\n        +get_interactions()\n    }\n\n    class DefaultHook {\n        -Queue _queue\n        -IdGenerator _id_generator\n        -float _timeout_secs\n        +emit(Event)\n    }\n    \n    class DefaultResponseHandler {\n        -Identity _source\n        -Hook _hook\n        -Cuid _cuid_generator\n        -dict[str, StreamEventEmitter] _streams\n        -bool _is_complete\n        +respond(event_name, response)\n", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "        +emit_json(event_name, data)\n        +emit_text_block(event_name, content)\n        +create_text_stream(event_name)\n        +emit_error(error_message, error_code, details)\n        +complete()\n        +is_complete()\n        -__emit_event(event)\n    }\n    \n    class DefaultTextStream {\n        -Identity _event_source\n        -str _event_name\n        -str _stream_id\n        -Hook _hook\n        -bool _is_complete\n        +emit_chunk(chunk)\n        +complete()\n        +id()\n        +is_complet", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "e()\n    }\n    \n    AbstractAgent --> DefaultServer : passed into\n    DefaultServer --> DefaultSession : creates\n    DefaultServer --> DefaultHook : creates\n    DefaultServer --> DefaultResponseHandler : creates\n    DefaultServer --> AbstractAgent : calls assist()\n    DefaultResponseHandler --> DefaultHook : uses\n    DefaultResponseHandler --> DefaultTextStream : creates\n    DefaultTextStream --> DefaultHook : uses\n```\n\n\n## Operation Flow \n#### Request Handling\n```mermaid\nsequenceDiagram\n    Clie", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "nt->>DefaultServer: HTTP Request\n    DefaultServer->>AstractAgent: Creates DefaultSession, DefaultHook, DefaultResponseHandler, calls AbstractAgent.assist()\n    AstractAgent->>DefaultHook: Generates response, emits events with hook\n    DefaultHook->>DefaultServer: Adds id, metadata, etc. to emitted events and then adds to response queue\n    DefaultServer->>Client: Pulls events from response queue, serves to client via SSE\n```\n\n#### Event Processing\n```mermaid\nsequenceDiagram\n    AbstractAgent->>", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "DefaultResponseHandler: Creates response event, calls one of DefaultResponseHandler's emit methods\n    DefaultResponseHandler->>DefaultHook: Uses DefaultHook to emit event\n    DefaultHook->>Queue: Adds event to queue\n    Queue->>DefaultServer: Pulls event from queue\n    DefaultServer->>Client: Serves event via SSE\n```\n\n\n## Key Components\n#### AbstractAgent\n- Abstract class for all agents (defined in the interface module)\n- Core features:\n    - `assist()`: Abstract method for agent execution\n\n###", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "# DefaultResponseHandler\n- Implements `ResponseHandler` protocol\n- Core features:\n    - Event source tracking\n    - Stream management\n    - Event emission via hook\n- Key methods:\n    - `respond()`: Sends complete responses\n    - `emit_json()`: Sends JSON events\n    - `emit_text_block()`: Sends text blocks\n    - `create_text_stream()`: Creates text streams\n    - `emit_error()`: Sends error events\n    - `complete()`: Marks response as complete\n\n#### DefaultTextStream\n- Implements `StreamEventEmitt", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "er` protocol\n- Core features:\n    - Stream source tracking\n    - Completion state tracking\n    - Chunk emission\n- Key methods:\n    - `emit_chunk()`: Sends text chunks\n    - `complete()`: Marks stream as complete\n\n#### DefaultHook\n- Implements `Hook` protocol using a `Queue`\n- Features:\n    - Event ID generation\n    - Timeout management\n    - Queue management\n- Key methods:\n    - `emit()`: Adds event to queue\n\n#### DefaultServer\n- Flask-based SSE server\n- Core features:\n    - Exposes `assist` HTT", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "P endpoint\n    - Processes requests\n    - Streams agent output\n- Key methods:\n    - `assist_endpoint()`: `assist` HTTP endpoint\n    - `stream_agent_output()`: Calls agent's `assist()` method and yields the output as well-formed SSE events\n\n#### DefaultSession\n- Implements `Session` protocol\n\n#### DefaultIdGenerator\n- ULID-based identifier generator\n- Core features:\n    - Monotonic ID generation\n    - Thread-safe operation\n    - Timestamp-based offsets\n- Key methods:\n    - `get_next_id()`: Genera", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\implementation\\README.md", "content": "tes a new ULID", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\agent.py", "content": "from abc import ABC, abstractmethod\nfrom sentient_agent_framework.interface.request import Query\nfrom sentient_agent_framework.interface.response_handler import ResponseHandler\nfrom sentient_agent_framework.interface.session import Session\n\n\nclass AbstractAgent(ABC):\n    \"\"\"An agent that has an identity and an assist method.\"\"\"\n\n    def __init__(\n            self,\n            name: str,\n    ):\n        self.name = name\n        \n\n    @abstractmethod\n    async def assist(\n            self,\n        ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\agent.py", "content": "    session: Session,\n            query: Query,\n            response_handler: ResponseHandler\n    ):\n        \"\"\"Process the request and generate a response.\"\"\"", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": "from enum import Enum\nfrom typing import (\n    Annotated,\n    Any,\n    Literal,\n    Mapping,\n    Optional,\n    TypeAlias,\n    Union\n)\nfrom pydantic import (\n    BaseModel,\n    ConfigDict,\n    Field,\n    TypeAdapter\n)\nfrom ulid import ULID\n\n\nERROR = \"error\"\nDEFAULT_ERROR_CODE = 500\n\n\nclass BaseEventType(str, Enum):\n    \"\"\"Base event types.\"\"\"\n\n    ATOMIC = \"atomic\"\n    CHUNKED = \"chunked\"\n\n\nclass EventContentType(str, Enum):\n    \"\"\"Event content types.\"\"\"\n\n    # Atomic events\n    JSON = \"atomic.j", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": "son\"\n    TEXTBLOCK = \"atomic.textblock\"\n\n    # Chunked events\n    TEXT_STREAM = \"chunked.text\"\n    ERROR = \"atomic.error\"\n    DONE = \"atomic.done\"\n\n    @property\n    def base_type(self) -> BaseEventType:\n        \"\"\"Get the base event type.\"\"\"\n        prefix = self.value.split('.')[0]\n        return BaseEventType(prefix)\n\n\nEventMetadata: TypeAlias = Mapping[str, Union[str, int, float, bool, list[str]]]\n\n\nStringKeyDict = Mapping[str, Any]\n\n\nclass Event(BaseModel):\n    \"\"\"\n    An event is used to s", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": "end a response chunk from an agent to the outside\n    world. This could be an intermediary result produced while processing a\n    request.\n    \"\"\"\n\n    content_type: EventContentType = Field(\n        description=\"Type of the event.\"\n    )\n\n    event_name: str = Field(\n        description=\"Name of the event as defined by event publisher.\"\n    )\n\n\nclass BaseEvent(Event):\n    \"\"\"A base event.\"\"\"\n\n    schema_version: str = Field(\n        default=\"1.0\",\n        description=\"Schema version for handlin", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": "g future changes\"\n    )\n\n    id: ULID = Field(\n        default_factory=ULID,\n        description=\"Uniquely identifies a base event.\"\n    )\n\n    source: str = Field(\n        description=\"Identifier of the source that raised the event.\"\n    )\n\n    metadata: Optional[EventMetadata] = Field(\n        default=None,\n        description=\"Extra metadata related to the event. The content of \"\n        \"the metadata cannot exceed 16 key-value pairs.\"\n    )\n\n\nclass AtomicEvent(BaseEvent):\n    \"\"\"An atomic ev", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": "ent.\"\"\"\n\n\nclass StreamEvent(BaseEvent):\n    \"\"\"\n    A base implementation for streaming events.\n    \"\"\"\n\n    stream_id: str = Field(\n        description=\"Stream identifier.\"\n    )\n\n    is_complete: bool = Field(\n        description=\"Indicates whether or not the stream is complete.\"\n    )\n\n\nclass DocumentEvent(AtomicEvent):\n    \"\"\"A document event.\"\"\"\n\n    content_type: Literal[EventContentType.JSON] = EventContentType.JSON\n    content: Mapping[Any, Any] = Field(\n        description=\"Atomic JOSN ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": "content\"\n    )\n\n\nclass TextBlockEvent(AtomicEvent):\n    \"\"\"A text block event.\"\"\"\n\n    content_type: Literal[EventContentType.TEXTBLOCK] = EventContentType.TEXTBLOCK\n    content: str = Field(\n        description=\"Text content \"\n    )\n\n\nclass TextChunkEvent(StreamEvent):\n    \"\"\"A text chunk event (part of a stream of text).\"\"\"\n\n    model_config = ConfigDict(populate_by_name=True)\n\n    content_type: Literal[EventContentType.TEXT_STREAM] = EventContentType.TEXT_STREAM\n    content: str = Field(\n    ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": "    description=\"Group of tokens that needs to be rendered in the UI.\",\n        min_length=0\n    )\n\n\nclass ErrorContent(BaseModel):\n    \"\"\"Error event content.\"\"\"\n\n    error_message: str = Field(\n        description=\"Description of error messages.\"\n    )\n    error_code: int = Field(\n        default=DEFAULT_ERROR_CODE,\n        description=\"Error code (HTTP status code wherever possible) \"\n    )\n    details: Optional[Mapping[str, Any]] = Field(\n        default=None,\n        description=\"Optional d", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": "etails about error messages. \"\n    )\n\n\nclass ErrorEvent(AtomicEvent):\n    \"\"\"An error event.\"\"\"\n\n    content_type:  Literal[EventContentType.ERROR] = EventContentType.ERROR\n    event_name: str = Field(\n        default=ERROR,\n        frozen=True\n    )\n    content: ErrorContent = Field(\n        description=\"Details about the error content.\"\n    )\n\n\nclass DoneEvent(AtomicEvent):\n    \"\"\"A done event.\"\"\"\n    \n    content_type: Literal[EventContentType.DONE] = EventContentType.DONE\n    event_name: str", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\events.py", "content": " = \"done\"\n\n\nResponseEvent = Annotated[\n    Union[DocumentEvent, TextBlockEvent,\n          TextChunkEvent, ErrorEvent, DoneEvent],\n    Field(discriminator=\"content_type\")\n]\n\nResponseEventAdapter = TypeAdapter[ResponseEvent](ResponseEvent)\nResponseEventListAdapter = TypeAdapter[list[ResponseEvent]](\n    list[ResponseEvent])", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\exceptions.py", "content": "class ProcessorError(Exception):\n    \"\"\"Base class for exception due to error in processor.\"\"\"\n\n\nclass AgentError(ProcessorError):\n    \"\"\"Base class for exception due to error in agents error.\"\"\"\n\n\nclass ResponseStreamClosedError(ProcessorError):\n    \"\"\"Exception raised when the connection is closed.\"\"\"\n\n\nclass TextStreamClosedError(ProcessorError):\n    \"\"\"Exception raised when text stream is closed.\"\"\"", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\hook.py", "content": "from sentient_agent_framework.interface.events import Event\nfrom typing import Protocol\n\n\nclass Hook(Protocol):\n    \"\"\"A hook is used to emit agent events to the outside world.\"\"\"\n\n\n    async def emit(self, event: Event) -> None:\n        \"\"\"Emit an agent event.\"\"\"", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\identity.py", "content": "from pydantic import (\n    BaseModel,\n    Field\n)\n\n\nclass Identity(BaseModel):\n    \"\"\"\n    Uniquely identifies an entity.\n    \n    Id is internal to the system whereas name is external to the system.\n    \"\"\"\n    \n    id: str = Field(\n        description=\"Uniquely identifies an entity.\"\n    )\n    name: str = Field(\n        description=\"Name of the entity, preferable unique.\"\n    )\n\n\n    def __str__(self):\n        return f\"{self.id}:{self.name}\"", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "## Architecture\n#### AbstractAgent\nThe `AbstractAgent` class is an abstract base class that defines the specification for an agent. It is not intended to be used directly, but rather to be subclassed by concrete agents that implement the `assist()` method. It, along with all of the interfaces that it depends on, are defined but not implemented in the `interface` module.\n\n```mermaid\nclassDiagram\n    class AbstractAgent {\n        <<abstract>>\n        +str name\n        +assist(Session, Query, Respo", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "nseHandler)\n    }\n    \n    class ResponseHandler {\n        <<interface>>\n        +respond(event_name, response)\n        +emit_json(event_name, data)\n        +emit_text_block(event_name, content)\n        +create_text_stream(event_name)\n        +emit_error(error_message, error_code, details)\n        +complete()\n        +is_complete()\n    }\n    \n    class StreamEventEmitter~T~ {\n        <<interface>>\n        +complete()\n        +id()\n        +is_complete()\n        +emit_chunk(chunk)\n    }\n    \n    ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "class Session {\n        <<interface>>\n        +processor_id\n        +activity_id\n        +request_id\n        +get_interactions()\n    }\n    \n    class Hook {\n        <<interface>>\n        +emit(Event)\n    }\n    \n    class Event {\n        +content_type\n        +event_name\n    }\n    \n    AbstractAgent --> ResponseHandler : uses\n    AbstractAgent --> Session : uses\n    ResponseHandler --> StreamEventEmitter : creates\n    ResponseHandler --> Event : emits via Hook\n    StreamEventEmitter --> Event : e", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "mits via Hook\n    Hook --> Event : emits\n```\n\n#### Request\nThe `Request` interface defines the specification for HTTP requests to an agent (requests are sent to the agent's `/assist` endpoint by Sentient Chat - agent developers are not responsible for building these requests).\n\n```mermaid\nclassDiagram    \n    class Query {\n        +ULID id\n        +str prompt\n    }\n    \n    class Request {\n        +Query query\n        +Optional[SessionObject] session\n    }\n    \n    class SessionObject {\n        ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "+str processor_id\n        +ULID activity_id\n        +ULID request_id\n        +List[Interaction] interactions\n    }\n    \n    class Interaction {\n        +M request\n        +Sequence[ResponseMessage] responses\n    }\n\n    Request *-- Query : contains\n    Request *-- SessionObject : contains (optional)\n    SessionObject *-- Interaction : contains list\n```\n\n#### Session\nThe `Session` interface defines the specification for a Sentient Chat session between a user and an agent. \n\n```mermaid\nclassDiagram", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "    \n    class SessionObject {\n        +str processor_id\n        +ULID activity_id\n        +ULID request_id\n        +List[Interaction] interactions\n    }\n    \n    class Interaction {\n        +M request\n        +Sequence[ResponseMessage] responses\n    }\n    \n    class RequestMessage {\n        +AssistRequest event\n    }\n    \n    class ResponseMessage {\n        +ResponseEvent event\n    }\n    \n    class AssistRequest {\n        +ULID id\n        +ULID chat_id\n        +AssistRequestContent content\n    ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "    +Optional[ULID] parent_request_id\n        +Optional[ULID] root_request_id\n    }\n    \n    class AssistRequestContent {\n        +str capability\n        +AssistRequestContentParts request_payload\n    }\n    \n    class AssistRequestContentParts {\n        +List[AssistRequestContentPart] parts\n    }\n    \n    class AssistRequestContentPart {\n        +str prompt\n        +List[str] files_ids\n    }\n\n    SessionObject *-- Interaction : contains list\n    Interaction *-- RequestMessage : contains\n    Inte", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "raction *-- ResponseMessage : contains sequence\n    RequestMessage *-- AssistRequest : contains\n    AssistRequest *-- AssistRequestContent : contains\n    AssistRequestContent *-- AssistRequestContentParts : contains\n    AssistRequestContentParts *-- AssistRequestContentPart : contains list\n```\n\n## Key Components\n#### AbstractAgent\n- Abstract class to be subclassed by concrete agents that implement the `assist()` method\n- Uses `ResponseHandler` to emit Sentient Chat events\n- Processes Sentient Ch", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "at`Request` objects\n- Key methods:\n    - `assist()`: Processes Sentient Chat `Request` object and emits events\n\n#### ResponseHandler\n- Protocol (interface) for emitting Sentient Chat events using a `Hook`\n- Key methods:\n    - `respond()`: Emits complete responses\n    - `emit_json()`: Emits DocumentEvent\n    - `emit_text_block()`: Emits TextBlockEvent\n    - `create_text_stream()`: Creates text stream to emit TextChunkEvents\n    - `emit_error()`: Emits ErrorEvent\n    - `complete()`: Marks response", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": " as complete (emits DoneEvent)\n\n#### Hook\n- Protocol (interface) for emitting events to external systems\n- Key methods:\n    - `emit()`: Emits an event\n\n#### Events\n- Classes for different types of events that can be emitted by an agent and rendered by Sentient Chat frontend\n```\nEvent (base class)\n\u2514\u2500\u2500 BaseEvent\n    \u251c\u2500\u2500 AtomicEvent (single messages)\n    \u2502   \u251c\u2500\u2500 DocumentEvent\n    \u2502   \u251c\u2500\u2500 TextBlockEvent\n    \u2502   \u251c\u2500\u2500 ErrorEvent\n    \u2502   \u2514\u2500\u2500 DoneEvent\n    \u2514\u2500\u2500 StreamEvent\n        \u2514\u2500\u2500 TextChunkEvent (stre", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "aming text)\n```\n- `DocumentEvent`: Used for JSON content\n- `TextBlockEvent`: Used for complete text blocks\n- `TextChunkEvent`: Used for streaming text chunks\n- `ErrorEvent`: Used for error messages\n- `DoneEvent`: Used for completion markers\n\n#### Session\n- Class for Sentient Chat session\n- Contains past interactions\n- Key methods:\n    - `processor_id`: (Getter) Identifies the processor\n    - `activity_id`: (Getter) Identifies the activity (e.g., chat)\n    - `request_id`: (Getter) Identifies spec", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\README.md", "content": "ific request\n    - `get_interactions()`: (Getter) Interaction history", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\request.py", "content": "from pydantic import (\n    BaseModel,\n    Field\n)\nfrom sentient_agent_framework.interface.session import SessionObject\nfrom typing import Optional\nfrom ulid import ULID\n\n\nclass Query(BaseModel):\n    \"\"\"Agent query.\"\"\"\n\n    id: ULID = Field(\n        description=\"Query ID.\"\n    )\n    prompt: str = Field(\n        description=\"Query prompt.\"\n    )\n\n\nclass Request(BaseModel):\n    \"\"\"A Sentient Chat Agent API request.\"\"\"\n\n    query: Query = Field(\n        description=\"Agent query.\"\n    )\n    session: ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\request.py", "content": "Optional[SessionObject] = Field(\n        default=None,\n        description=\"Agent session.\"\n    )", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\response_handler.py", "content": "from typing import (\n    Any,\n    Generic,\n    Mapping,\n    Optional,\n    Protocol,\n    TypeVar,\n    Union,\n)\nfrom sentient_agent_framework.interface.events import DEFAULT_ERROR_CODE\n\n\nT_contra = TypeVar('T_contra', contravariant=True)\n\n\nclass StreamEventEmitter(Protocol, Generic[T_contra]):\n    \"\"\"Used to emit events to a stream.\"\"\"\n\n    async def complete(self) -> None:\n        \"\"\"Mark stream as complete.\"\"\"\n\n\n    def id(self) -> str:\n        \"\"\"Get stream ID.\"\"\"\n\n\n    def is_complete(self) ->", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\response_handler.py", "content": " bool:\n        \"\"\"Check if stream is complete.\"\"\"\n\n\n    async def emit_chunk(self, chunk: T_contra):\n        \"\"\"Send event chunk to stream.\"\"\"\n\n\nclass ResponseHandler(Protocol):\n    \"\"\"Used to emit events to a client.\"\"\"\n\n    def respond(\n            self,\n            event_name: str,\n            response: Union[Mapping[Any, Any], str]\n    ) -> None:\n        \"\"\"Send a single atomic event as a complete response.\"\"\"\n\n\n    async def emit_json(\n            self,\n            event_name: str,\n        ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\response_handler.py", "content": "    data: Mapping[Any, Any]\n    ) -> None:\n        \"\"\"Send a single atomic JSON response.\"\"\"\n\n\n    async def emit_text_block(\n            self,\n            event_name: str,\n            content: str\n    ) -> None:\n        \"\"\"Send a single atomic text block response.\"\"\"\n\n\n    def create_text_stream(self, event_name: str) -> StreamEventEmitter[str]:\n        \"\"\"Create and return a new StreamEventEmitter object.\"\"\"\n\n\n    async def emit_error(\n            self,\n            error_message: str,\n        ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\response_handler.py", "content": "    error_code: int = DEFAULT_ERROR_CODE,\n            details: Optional[Mapping[str, Any]] = None\n    ) -> None:\n        \"\"\"Send an error event.\"\"\"\n\n\n    async def complete(self) -> None:\n        \"\"\"Mark all streams as complete and the response as finished.\"\"\"\n\n\n    def is_complete(self) -> bool:\n        \"\"\"Return true if the response is marked complete, false otherwise.\"\"\"", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "from pydantic import (\n    BaseModel,\n    ConfigDict,\n    Field,\n    model_validator\n)\nfrom sentient_agent_framework.interface.events import (\n    Event,\n    ResponseEvent\n)\nfrom typing import (\n    AsyncIterable,\n    Generic,\n    List,\n    Literal,\n    Protocol,\n    Self,\n    Sequence,\n    TypeVar\n)\nfrom ulid import ULID\n\n\nDEFAULTY_CAPABILITY = \"default\"\nASSIST_CAPABILITY = \"assist\"\n\n\nI = TypeVar(\"I\", bound=BaseModel, contravariant=True)\nO = TypeVar(\"O\", bound=BaseModel, covariant=True)\nM = Typ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "eVar(\"M\", bound=\"InteractionMessage\")\n\n\nclass CapabilitySpec(BaseModel):\n    \"\"\"Processor capability specification.\"\"\"\n\n    name: str = Field(\n        description=\"Name of a processor-capability. Unique for a processor.\"\n    )\n\n    description: str = Field(\n        description=\"Description of the capability.\"\n    )\n\n    stream_response: bool = Field(\n        description=\"Type of the capability.\"\n    )\n\n\nclass AtomicCapabilitySpec(CapabilitySpec, Generic[I, O]):\n    \"\"\"Atomic capability specifica", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "tion.\"\"\"\n    \n    stream_response: Literal[False] = False\n\n    input_schema: type[I] = Field(\n        description=\"Schema of the input.\"\n    )\n\n    output_schema: type[O] = Field(\n        description=\"Schema of the response content.\"\n    )\n\n\nclass StreamCapabilitySpec(CapabilitySpec, Generic[I]):\n    \"\"\"Streaming capability specification.\"\"\"\n\n    stream_response: Literal[True] = True\n\n    input_schema: type[I] = Field(\n        description=\"Schema of the request content.\"\n    )\n    output_events_", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "schema: List[Event] = Field(\n        description=\"Schema for each event returned by the streaming capability.\")\n\n\nclass CapabilityConfig(BaseModel):\n    \"\"\"Externally configurable attributes of a processor-capability.\"\"\"\n\n    name: str = Field(\n        description=\"Uniquely identifies the capability of a processor.\"\n    )\n\n    id: str = Field(\n        description=\"Uniquely identifies a processor capability globally.\"\n    )\n    \n    description: str | None = Field(\n        default=None,\n        d", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "escription=\"Overridden description of the processor capability.\"\n    )\n\n\nclass CapabilityRequestContent(BaseModel, Generic[I]):\n    \"\"\"Capability request content.\"\"\"\n\n    capability: str = Field(\n        description=\"Capability name.\"\n    )\n\n    request_payload: I = Field(\n        description=\"Request content.\"\n    )\n\n\nclass AssistRequestContentPart(BaseModel):\n    \"\"\"Assist request content part.\"\"\"\n\n    model_config = ConfigDict(\n        populate_by_name=True,\n        json_schema_extra={\"exampl", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "es\": [\n            {\"prompt\": \"Hello\", \"fileIds\": [\"id1\", \"id2\"]}\n        ]}\n    )\n\n    prompt: str = Field(\n        description=\" prompt from user \"\n    )\n\n    files_ids: List[str] = Field(\n        description=\" List of file ids attached to the request part\",\n        alias=\"fileIds\"\n    )\n\n\nclass AssistRequestContentParts(BaseModel):\n    \"\"\"Collection of assist request content parts.\"\"\"\n\n    parts: List[AssistRequestContentPart]\n\n\nclass AssistRequestContent(CapabilityRequestContent[AssistReques", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "tContentParts]):\n    \"\"\"Assist request content.\"\"\"\n\n    capability: str = ASSIST_CAPABILITY\n\n    request_payload: AssistRequestContentParts = Field(\n        description=\"Request content parts.\"\n    )\n\n\nclass Request(BaseModel, Generic[I]):\n    \"\"\"Chat inference request.\"\"\"\n\n    model_config = ConfigDict(populate_by_name=True)\n\n    id: ULID = Field(\n        default_factory=ULID,\n        description=\"Uniquely identifies a request.\"\n    )\n    chat_id: ULID = Field(\n        description=\"Chat identif", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "ier.\",\n        alias=\"chatId\"\n    )\n    content: CapabilityRequestContent[I] = Field(\n        description=\"Request content.\"\n    )\n    parent_request_id: ULID | None = Field(\n        default=None,\n        description=\"Parent request identifier.\"\n    )\n    root_request_id: ULID | None = Field(\n        default=None,\n        description=\"The identifier of the first request in the chain.\"\n    )\n\n\n    @model_validator(mode=\"after\")\n    def stamp_and_validate_root_request_id(self) -> Self:\n        \"\"\"", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "Stamp root request identifier if not provided.\"\"\"\n\n        # If parent request identifier is provided, then we need root request\n        # identifier also to be provided.\n        if self.parent_request_id is not None \\\n                and self.root_request_id is None:\n            raise ValueError(\n                \"Root request identifier is required when parent request \"\n                \"identifier is provided.\"\n            )\n        # If not provided use request identifier as root identifier.\n ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "       if self.root_request_id is None:\n            self.root_request_id = self.id\n        # Make sure that parent request identifier is less than the request\n        # identifier.\n        if self.parent_request_id is not None \\\n                and self.parent_request_id >= self.id:\n            raise ValueError(\n                \"Parent request identifier should be less than the request \"\n                \"identifier.\"\n            )\n        # Make sure that root request identifier is not greater t", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "han the parent\n        # request identifier.\n        if self.parent_request_id is not None \\\n                and self.root_request_id > self.parent_request_id:\n            raise ValueError(\n                \"Root request identifier should be less than or equal to the \"\n                \"parent request identifier.\"\n            )\n        return self\n\n\nclass AssistRequest(Request[AssistRequestContentParts]):\n    \"\"\"Assist request.\"\"\"\n\n    content: AssistRequestContent = Field(\n        description=\"Re", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "quest content.\"\n    )\n\n\nclass InteractionMessage(BaseModel):\n    \"\"\"A persisted interaction message\"\"\"\n\n    sender: str | None = Field(\n        default=None,\n        description=\"The sender of the message.\"\n    )\n    recipients: set[str] | None = Field(\n        default=None,\n        description=\"The recipients of the message.\"\n    )\n\n\nclass RequestMessage(InteractionMessage):\n    \"\"\"A persisted request interaction message.\"\"\"\n    event: AssistRequest = Field(\n        description=\"The assist requ", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "est.\"\n    )\n\n\nclass ResponseMessage(InteractionMessage):\n    \"\"\"A persisted response interaction message.\"\"\"\n\n    event: ResponseEvent = Field(\n        description=\"The response event.\"\n    )\n\n\nclass Interaction(BaseModel, Generic[M]):\n    \"\"\"Interaction between user and agent.\"\"\"\n\n    request: M = Field(\n        description=\"User request.\"\n    )\n    responses: Sequence[ResponseMessage] = Field(\n        description=\"Agent responses.\"\n    )\n\n\nclass SessionObject(BaseModel):\n    \"\"\"Agent session.\"", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "\"\"\n\n    processor_id: str = Field(\n        description=\"Processor ID.\"\n    )\n    activity_id: ULID = Field(\n        description=\"Activity ID.\"\n    )\n    request_id: ULID = Field(\n        description=\"Request ID.\"\n    )\n    interactions: List[Interaction] = Field(\n        description=\"Past interactions.\"\n    )\n\n\nclass Session(Protocol):\n    \"\"\"Sessions represent a chat (set of interactions) between a user and an agent.\"\"\"\n\n    @property\n    def processor_id(self) -> str:\n        \"\"\"Get the proces", "repo": "sentient-agi/Sentient-Agent-Framework"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\sentient-agi_Sentient-Agent-Framework\\src\\sentient_agent_framework\\interface\\session.py", "content": "sor identifier for the session.\"\"\"\n\n    @property\n    def activity_id(self) -> ULID:\n        \"\"\"Get the activity identifier for the session.\"\"\"\n\n    @property\n    def request_id(self) -> ULID:\n        \"\"\"Get the request identifier for the session.\"\"\"\n\n    async def get_interactions(\n            self, **kwargs\n    ) -> AsyncIterable[Interaction]:\n        \"\"\"Get interactions from the session.\"\"\"", "repo": "sentient-agi/Sentient-Agent-Framework"}]