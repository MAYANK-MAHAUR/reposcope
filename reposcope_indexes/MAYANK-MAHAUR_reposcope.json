[{"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "\nimport re\nimport logging\nimport asyncio\nimport numpy as np\nimport faiss\nimport json\nimport os\nimport shutil\nimport tempfile\nfrom typing import List, Dict, Any\nfrom sentient_agent_framework.interface.agent import AbstractAgent\nfrom sentient_agent_framework.interface.session import Session\nfrom sentient_agent_framework.interface.request import Query\nfrom sentient_agent_framework.interface.response_handler import ResponseHandler\nfrom sentence_transformers import SentenceTransformer\nfrom config imp", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "ort async_client\nfrom database import MessageDatabase\nfrom data_formatter import format_all_chunks_for_llm, format_interactions_for_llm\nfrom github_adapter import clone_repo, fetch_repo_files, parse_function_calls, count_lines_of_code, find_code_patterns, run_pylint\nimport time\nimport aiosqlite\n\n# Configure logging to write to file only in production, console in debug\nlogging.basicConfig(\n    level=logging.DEBUG,\n    handlers=[\n        logging.FileHandler(\"reposcope.log\"),\n        logging.Stream", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "Handler() if os.getenv(\"DEBUG_MODE\", \"false\").lower() == \"true\" else logging.NullHandler()\n    ]\n)\nlogger = logging.getLogger(__name__)\n\nmessage_db = MessageDatabase()\n\nclass RepoScopeAgent(AbstractAgent):\n    def __init__(self):\n        super().__init__(name=\"RepoScope\")\n        self.embedder = SentenceTransformer('all-MiniLM-L6-v2')\n        self.session_timeout = 3600\n        self.active_sessions = {}\n        self.index_dir = \"reposcope_indexes\"\n        os.makedirs(self.index_dir, exist_ok=Tru", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "e)\n        self.cleanup_task = None\n        try:\n            faiss_index = faiss.IndexFlatL2(384)\n            logger.debug(\"FAISS initialized successfully\")\n        except Exception as e:\n            logger.error(f\"Failed to initialize FAISS: {str(e)}\")\n            raise ImportError(\"FAISS initialization failed. Ensure faiss-cpu is installed.\")\n\n    def start_cleanup_task(self):\n        if self.cleanup_task is None or self.cleanup_task.done():\n            self.cleanup_task = asyncio.create_task(", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "self._cleanup_stale_sessions())\n\n    async def _cleanup_stale_sessions(self):\n        logger.info(\"Cleanup task started - checking every 60 seconds\")\n        while True:\n            current_time = int(time.time())\n            stale_sessions = [\n                sid for sid, last_active in self.active_sessions.items()\n                if current_time - last_active > self.session_timeout\n            ]\n            for sid in stale_sessions:\n                try:\n                    await message_db.cl", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "eanup_session(sid)\n                    logger.info(f\"Cleaned up stale session: {sid}\")\n                    del self.active_sessions[sid]\n                except Exception as e:\n                    logger.error(f\"Failed to clean up session {sid}: {str(e)}\")\n            async with aiosqlite.connect(\"reposcope_sessions.db\") as db:\n                cursor = await db.execute(\n                    \"SELECT repo FROM indexes WHERE timestamp < ?\",\n                    (current_time - 86400 * 7,)\n            ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "    )\n                rows = await cursor.fetchall()\n                for row in rows:\n                    repo = row[0]\n                    await message_db.cleanup_index(repo)\n                await cursor.close()\n            await asyncio.sleep(60)\n\n    async def classify_intent(self, prompt: str) -> Dict[str, Any]:\n        \"\"\"Use LLM to classify the query intent and extract parameters.\"\"\"\n        llm_prompt = (\n            f\"Classify the following user query and extract parameters. Possible in", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "tents: analyze, trace, compare, lines_of_code, file_count, find_issues, find_pattern, set_default, or unknown.\\n\\n\"\n            f\"For 'trace': extract function_name.\\n\"\n            f\"For 'compare': extract function_name and repos (list of user/repo, e.g., ['pallets/flask']).\\n\"\n            f\"For 'lines_of_code' or 'file_count': extract repos if specified (e.g., ['pallets/flask']), else use default.\\n\"\n            f\"For 'find_issues': extract repos if specified (e.g., ['pallets/flask']), else use", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": " default.\\n\"\n            f\"For 'find_pattern': extract pattern (e.g., 'try-except') and repos if specified (e.g., ['pallets/flask']), else use default.\\n\"\n            f\"For 'set_default': extract repo (e.g., 'pallets/flask').\\n\"\n            f\"For 'analyze': general analysis, extract repos if specified (e.g., ['pallets/flask']), else use default.\\n\"\n            f\"Return JSON: {{ \\\"intent\\\": \\\"intent_name\\\", \\\"function_name\\\": \\\"str or null\\\", \\\"pattern\\\": \\\"str or null\\\", \\\"repos\\\": [\\\"list of us", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "er/repo\\\"] or null }}\\n\\n\"\n            f\"Examples:\\n\"\n            f\"'set default github.com/pallets/flask' -> {{'intent': 'set_default', 'repos': ['pallets/flask'], 'function_name': null, 'pattern': null}}\\n\"\n            f\"'find try-except' -> {{'intent': 'find_pattern', 'pattern': 'try-except', 'repos': null, 'function_name': null}}\\n\"\n            f\"'summarize github.com/pallets/flask' -> {{'intent': 'analyze', 'repos': ['pallets/flask'], 'function_name': null, 'pattern': null}}\\n\"\n            ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "f\"'is github.com/pallets/flask secure' -> {{'intent': 'analyze', 'repos': ['pallets/flask'], 'function_name': null, 'pattern': null}}\\n\"\n            f\"Query: {prompt}\"\n        )\n        try:\n            response = await async_client.chat.completions.create(\n                model=\"qwen-72b\",\n                messages=[{\"role\": \"user\", \"content\": llm_prompt}],\n                max_tokens=200\n            )\n            intent_data = json.loads(response.choices[0].message.content)\n            logger.de", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "bug(f\"Classified intent: {intent_data}\")\n            return intent_data\n        except Exception as e:\n            logger.error(f\"Failed to classify intent: {str(e)}\")\n            return {\"intent\": \"unknown\", \"repos\": None, \"function_name\": None, \"pattern\": None}\n\n    async def assist(self, session: Session, query: Query, response_handler: ResponseHandler):\n        if self.cleanup_task is None:\n            self.start_cleanup_task()\n\n        activity_id_str = str(session.activity_id)\n        curr", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "ent_time = int(time.time())\n        self.active_sessions[activity_id_str] = current_time\n\n        try:\n            past_interactions = await message_db.retrieve_messages(activity_id_str)\n            logger.debug(f\"Retrieved {len(past_interactions)} interactions for session {activity_id_str}\")\n\n            # Classify intent using LLM\n            intent_data = await self.classify_intent(query.prompt)\n            intent = intent_data[\"intent\"]\n            function_name = intent_data.get(\"function_n", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "ame\")\n            pattern = intent_data.get(\"pattern\")\n            specified_repos = intent_data.get(\"repos\")\n\n            repos_data = {}\n\n            # Normalize and validate repo string\n            def normalize_repo(repo: str) -> tuple[str, str]:\n                \"\"\"Convert repo string (e.g., 'github.com/user/repo' or 'user/repo') to (user, repo).\"\"\"\n                repo = repo.strip('/')\n                if repo.startswith('github.com/'):\n                    parts = repo.split('/')\n          ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "          if len(parts) >= 3:\n                        return parts[-2], parts[-1]\n                    else:\n                        raise ValueError(f\"Invalid repo format: {repo}. Expected 'github.com/user/repo' or 'user/repo'.\")\n                parts = repo.split('/')\n                if len(parts) == 2:\n                    return parts[0], parts[1]\n                raise ValueError(f\"Invalid repo format: {repo}. Expected 'github.com/user/repo' or 'user/repo'.\")\n\n            # Load or index repos", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "\n            async def load_or_index_repo(user: str, repo: str, repo_path: str, index_path: str, chunk_path: str):\n                current_repo = f\"{user}/{repo}\"\n                index_metadata = await message_db.retrieve_index(current_repo)\n                if index_metadata and os.path.exists(index_path) and os.path.exists(chunk_path):\n                    await response_handler.emit_text_block(\"status\", f\"Loading existing index for {current_repo}...\")\n                    try:\n                  ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "      index = faiss.read_index(index_path)\n                        with open(chunk_path, 'r') as f:\n                            chunks = json.load(f)\n                        logger.debug(f\"Loaded {len(chunks)} chunks from {index_path}\")\n                    except Exception as e:\n                        logger.error(f\"Failed to load index for {current_repo}: {str(e)}\")\n                        index = None\n                        chunks = []\n                else:\n                    await response", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "_handler.emit_text_block(\"status\", f\"Cloning {current_repo}...\")\n                    await clone_repo(f\"https://github.com/{user}/{repo}.git\", repo_path)\n                    files = await fetch_repo_files(repo_path)\n                    function_calls = await parse_function_calls(repo_path, current_repo)\n                    await message_db.store_function_calls(current_repo, function_calls, current_time)\n\n                    chunks = []\n                    for file in files:\n                     ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "   content = file[\"content\"]\n                        chunked = [content[i:i+500] for i in range(0, len(content), 500)]\n                        chunks.extend([{\"file_path\": file[\"file_path\"], \"content\": chunk, \"repo\": current_repo} for chunk in chunked])\n\n                    chunk_texts = [chunk[\"content\"] for chunk in chunks]\n                    embeddings = self.embedder.encode(chunk_texts, show_progress_bar=False)\n                    embeddings = np.array(embeddings).astype('float32')\n        ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "            try:\n                        dimension = embeddings.shape[1]\n                        index = faiss.IndexFlatL2(dimension)\n                        index.add(embeddings)\n                        faiss.write_index(index, index_path)\n                        with open(chunk_path, 'w') as f:\n                            json.dump(chunks, f)\n                        await message_db.store_index(current_repo, index_path, len(chunks), current_time)\n                        logger.debug(f\"Saved in", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "dex for {current_repo} to {index_path}\")\n                    except Exception as e:\n                        logger.error(f\"FAISS indexing failed: {str(e)}\")\n                        await response_handler.emit_error(f\"Failed to index repo: {str(e)}\", 500)\n                        await response_handler.complete()\n                        return None\n                    await response_handler.emit_text_block(\"status\", f\"Indexed {len(chunks)} chunks from {current_repo}.\")\n                return curre", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "nt_repo, {\"index\": index, \"chunks\": chunks, \"repo_path\": repo_path}\n\n            if specified_repos:\n                for repo in specified_repos:\n                    try:\n                        user, repo_name = normalize_repo(repo)\n                        repo_path = os.path.join(tempfile.gettempdir(), f\"{user}_{repo_name}\")\n                        index_path = os.path.join(self.index_dir, f\"{user}_{repo_name}.faiss\")\n                        chunk_path = index_path.replace(\".faiss\", \".json\")\n ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "                       result = await load_or_index_repo(user, repo_name, repo_path, index_path, chunk_path)\n                        if result:\n                            repos_data[result[0]] = result[1]\n                    except ValueError as e:\n                        logger.error(f\"Invalid repo format: {str(e)}\")\n                        await response_handler.emit_text_block(\"error\", str(e))\n                        await response_handler.complete()\n                        return\n          ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "  else:\n                default_repo = await message_db.get_default_repo(activity_id_str)\n                if default_repo:\n                    try:\n                        user, repo = normalize_repo(default_repo)\n                        repo_path = os.path.join(tempfile.gettempdir(), f\"{user}_{repo}\")\n                        index_path = os.path.join(self.index_dir, f\"{user}_{repo}.faiss\")\n                        chunk_path = index_path.replace(\".faiss\", \".json\")\n                        result ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "= await load_or_index_repo(user, repo, repo_path, index_path, chunk_path)\n                        if result:\n                            repos_data[result[0]] = result[1]\n                    except ValueError as e:\n                        logger.error(f\"Invalid default repo format: {str(e)}\")\n                        await response_handler.emit_text_block(\"error\", f\"Invalid default repo: {str(e)}. Please set a valid default repo.\")\n                        await response_handler.complete()\n       ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "                 return\n                else:\n                    last_repos = [msg[\"repo_data\"][\"repo\"] for msg in past_interactions if msg[\"repo_data\"] and \"repo\" in msg[\"repo_data\"]]\n                    if last_repos:\n                        for repo in set(last_repos[-2:]):\n                            try:\n                                user, repo_name = normalize_repo(repo)\n                                repo_path = os.path.join(tempfile.gettempdir(), f\"{user}_{repo_name}\")\n              ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "                  index_path = os.path.join(self.index_dir, f\"{user}_{repo_name}.faiss\")\n                                chunk_path = index_path.replace(\".faiss\", \".json\")\n                                result = await load_or_index_repo(user, repo_name, repo_path, index_path, chunk_path)\n                                if result:\n                                    repos_data[result[0]] = result[1]\n                            except ValueError as e:\n                                logger.error(", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "f\"Invalid repo format in history: {str(e)}\")\n                                continue\n                if not repos_data and intent != \"unknown\":\n                    await response_handler.emit_text_block(\n                        \"status\",\n                        \"No repos indexed or default set. Please specify a repo (e.g., 'summarize github.com/pallets/flask') or set a default (e.g., 'set default github.com/pallets/flask').\"\n                    )\n                    await response_handler.compl", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "ete()\n                    return\n\n            if intent == \"set_default\":\n                if specified_repos:\n                    try:\n                        user, repo_name = normalize_repo(specified_repos[0])\n                        default_repo = f\"{user}/{repo_name}\"\n                        await message_db.set_default_repo(activity_id_str, default_repo, current_time)\n                        await response_handler.emit_text_block(\"status\", f\"Set default repo to {default_repo}.\")\n           ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "         except ValueError as e:\n                        logger.error(f\"Invalid repo format: {str(e)}\")\n                        await response_handler.emit_text_block(\"error\", str(e))\n                    await response_handler.complete()\n                    return\n                else:\n                    await response_handler.emit_text_block(\"status\", \"No repo specified for default. Please provide a GitHub link (e.g., 'set default github.com/pallets/flask').\")\n                    await respons", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "e_handler.complete()\n                    return\n\n            if intent == \"trace\" and function_name:\n                if not repos_data:\n                    await response_handler.emit_text_block(\n                        \"status\",\n                        \"No repos indexed or default set. Please specify a repo (e.g., 'trace route in github.com/pallets/flask').\"\n                    )\n                    await response_handler.complete()\n                    return\n                await response_hand", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "ler.emit_text_block(\"status\", f\"Tracing function {function_name} in {', '.join(repos_data.keys())}...\")\n                call_graph_text = \"\"\n                mermaid = [\"graph TD\"]\n                for repo, data in repos_data.items():\n                    function_calls = await message_db.retrieve_function_calls(repo, function_name)\n                    if function_calls:\n                        call_graph_text += f\"\\n{repo}:\\n\"\n                        for call in function_calls:\n                  ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "          caller = call[\"caller\"] or \"Unknown\"\n                            line = f\"{caller} -> {call['callee']} at {call['file_path']}:{call['line']} ({call['line_content']})\\n\"\n                            call_graph_text += line\n                            mermaid.append(f\"    {caller.replace('.', '_')}_{repo.replace('/', '_')} --> {call['callee'].replace('.', '_')}_{repo.replace('/', '_')}\")\n                if not call_graph_text:\n                    await response_handler.emit_text_block(\"an", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "alysis\", f\"No calls found for {function_name}.\")\n                    await response_handler.complete()\n                    return\n\n                mermaid_text = \"\\n\".join(mermaid)\n                analysis_text = f\"Call graph for {function_name}:\\n{call_graph_text}\\nMermaid diagram:\\n```mermaid\\n{mermaid_text}\\n```\"\n                await response_handler.emit_text_block(\"analysis\", analysis_text)\n                await message_db.store_message(activity_id_str, query.prompt, {\"repos\": list(repos_d", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "ata.keys()), \"query\": query.prompt, \"response\": analysis_text}, current_time)\n                await response_handler.complete()\n                return\n\n            if intent == \"compare\" and function_name:\n                if not repos_data:\n                    await response_handler.emit_text_block(\n                        \"status\",\n                        \"No repos indexed or default set. Please provide GitHub links (e.g., 'compare route in github.com/pallets/flask and github.com/tiangolo/fasta", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "pi').\"\n                    )\n                    await response_handler.complete()\n                    return\n                await response_handler.emit_text_block(\"status\", f\"Comparing {', '.join(repos_data.keys())}...\")\n                comparison_results = []\n                for repo, data in repos_data.items():\n                    function_calls = await message_db.retrieve_function_calls(repo, function_name)\n                    if function_calls:\n                        comparison_results.ap", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "pend({\n                            \"repo\": repo,\n                            \"calls\": [\n                                {\n                                    \"caller\": call[\"caller\"] or \"Unknown\",\n                                    \"callee\": call[\"callee\"],\n                                    \"file_path\": call[\"file_path\"],\n                                    \"line\": call[\"line\"]\n                                }\n                                for call in function_calls\n                       ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "     ]\n                        })\n                    else:\n                        query_emb = self.embedder.encode([query.prompt], show_progress_bar=False)\n                        query_emb = np.array(query_emb).astype('float32')\n                        _, indices = data[\"index\"].search(query_emb, k=5)\n                        relevant_chunks = [data[\"chunks\"][i] for i in indices[0]]\n                        comparison_results.append({\n                            \"repo\": repo,\n                  ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "          \"calls\": [f\"Chunk from {chunk['file_path']}: {chunk['content'][:100]}...\" for chunk in relevant_chunks]\n                        })\n\n                table_lines = [\"| Repo | Caller | Callee | File | Line |\", \"|------|--------|--------|------|------|\"]\n                for result in comparison_results:\n                    repo = result[\"repo\"]\n                    if isinstance(result[\"calls\"][0], dict):\n                        for call in result[\"calls\"]:\n                            table", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "_lines.append(\n                                f\"| {repo} | {call['caller']} | {call['callee']} | {call['file_path']} | {call['line']} |\"\n                            )\n                    else:\n                        for chunk in result[\"calls\"]:\n                            table_lines.append(f\"| {repo} | - | - | {chunk.split(': ')[0].split(' ')[2]} | - |\")\n                comparison_text = \"Comparison Results:\\n\" + \"\\n\".join(table_lines) + \"\\n\"\n\n                mermaid = [\"graph TD\"]\n         ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "       for result in comparison_results:\n                    if isinstance(result[\"calls\"][0], dict):\n                        for call in result[\"calls\"]:\n                            caller = call[\"caller\"].replace('.', '_')\n                            callee = call[\"callee\"].replace('.', '_')\n                            repo_id = result[\"repo\"].replace('/', '_')\n                            mermaid.append(f\"    {caller}_{repo_id} --> {callee}_{repo_id}\")\n                mermaid_text = \"\\n\".join(", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "mermaid)\n\n                await response_handler.emit_text_block(\"analysis\", f\"{comparison_text}\\nMermaid diagram:\\n```mermaid\\n{mermaid_text}\\n```\")\n                await message_db.store_message(activity_id_str, query.prompt, {\"repos\": list(repos_data.keys()), \"query\": query.prompt, \"response\": comparison_text}, current_time)\n                await response_handler.complete()\n                return\n\n            if intent == \"lines_of_code\":\n                if not repos_data:\n                   ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": " await response_handler.emit_text_block(\n                        \"status\",\n                        \"No repos indexed or default set. Please specify a repo (e.g., 'how many lines of code in github.com/pallets/flask').\"\n                    )\n                    await response_handler.complete()\n                    return\n                await response_handler.emit_text_block(\"status\", f\"Counting lines of code for {', '.join(repos_data.keys())}...\")\n                line_counts = []\n                ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "for repo, data in repos_data.items():\n                    line_count = await count_lines_of_code(data[\"repo_path\"])\n                    line_counts.append({\"repo\": repo, **line_count})\n\n                table_lines = [\n                    \"| Repo | Total Lines | Python Files | Python Lines | JS Files | JS Lines | Other Files | Other Lines |\",\n                    \"|------|-------------|--------------|--------------|----------|----------|-------------|-------------|\"\n                ]\n             ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "   for count in line_counts:\n                    table_lines.append(\n                        f\"| {count['repo']} | {count['total_lines']} | {count['python_files']} | {count['python_lines']} | \"\n                        f\"{count['js_files']} | {count['js_lines']} | {count['other_files']} | {count['other_lines']} |\"\n                    )\n                table_text = \"\\n\".join(table_lines)\n                await response_handler.emit_text_block(\"analysis\", f\"Line Count Results:\\n{table_text}\")\n      ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "          await message_db.store_message(activity_id_str, query.prompt, {\"repos\": list(repos_data.keys()), \"query\": query.prompt, \"response\": table_text}, current_time)\n                await response_handler.complete()\n                return\n\n            if intent == \"file_count\":\n                if not repos_data:\n                    await response_handler.emit_text_block(\n                        \"status\",\n                        \"No repos indexed or default set. Please specify a repo (e.g., 'f", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "ile count in github.com/pallets/flask').\"\n                    )\n                    await response_handler.complete()\n                    return\n                await response_handler.emit_text_block(\"status\", f\"Counting files for {', '.join(repos_data.keys())}...\")\n                file_counts = []\n                for repo, data in repos_data.items():\n                    files = await fetch_repo_files(data[\"repo_path\"])\n                    python_files = sum(1 for f in files if f[\"file_path\"].en", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "dswith('.py'))\n                    js_files = sum(1 for f in files if f[\"file_path\"].endswith('.js'))\n                    other_files = len(files) - python_files - js_files\n                    file_counts.append({\n                        \"repo\": repo,\n                        \"total_files\": len(files),\n                        \"python_files\": python_files,\n                        \"js_files\": js_files,\n                        \"other_files\": other_files\n                    })\n\n                table_", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "lines = [\n                    \"| Repo | Total Files | Python Files | JS Files | Other Files |\",\n                    \"|------|-------------|--------------|----------|-------------|\"\n                ]\n                for count in file_counts:\n                    table_lines.append(\n                        f\"| {count['repo']} | {count['total_files']} | {count['python_files']} | {count['js_files']} | {count['other_files']} |\"\n                    )\n                table_text = \"\\n\".join(table_lines)\n", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "                await response_handler.emit_text_block(\"analysis\", f\"File Count Results:\\n{table_text}\")\n                await message_db.store_message(activity_id_str, query.prompt, {\"repos\": list(repos_data.keys()), \"query\": query.prompt, \"response\": table_text}, current_time)\n                await response_handler.complete()\n                return\n\n            if intent == \"find_issues\":\n                if not repos_data:\n                    await response_handler.emit_text_block(\n           ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "             \"status\",\n                        \"No repos indexed or default set. Please specify a repo (e.g., 'find issues in github.com/pallets/flask').\"\n                    )\n                    await response_handler.complete()\n                    return\n                await response_handler.emit_text_block(\"status\", f\"Scanning for code issues in {', '.join(repos_data.keys())}...\")\n                issue_results = []\n                for repo, data in repos_data.items():\n                    is", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "sues = await run_pylint(data[\"repo_path\"], repo)\n                    issue_results.append({\"repo\": repo, \"issues\": issues})\n\n                table_lines = [\"| Repo | File | Line | Issue Code | Message |\", \"|------|------|------|------------|---------|\"]\n                for result in issue_results:\n                    for issue in result[\"issues\"]:\n                        table_lines.append(\n                            f\"| {result['repo']} | {issue['file_path']} | {issue['line']} | {issue['issue_", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "code']} | {issue['message']} |\"\n                        )\n                issues_text = \"Code Issues Found:\\n\" + \"\\n\".join(table_lines) if table_lines[2:] else \"No code issues found.\"\n                await response_handler.emit_text_block(\"analysis\", issues_text)\n                await message_db.store_message(activity_id_str, query.prompt, {\"repos\": list(repos_data.keys()), \"query\": query.prompt, \"response\": issues_text}, current_time)\n                await response_handler.complete()\n          ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "      return\n\n            if intent == \"find_pattern\" and pattern:\n                if not repos_data:\n                    await response_handler.emit_text_block(\n                        \"status\",\n                        \"No repos indexed or default set. Please specify a repo (e.g., 'find try-except in github.com/pallets/flask').\"\n                    )\n                    await response_handler.complete()\n                    return\n                await response_handler.emit_text_block(\"status\", ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "f\"Searching for {pattern} patterns in {', '.join(repos_data.keys())}...\")\n                pattern_results = []\n                for repo, data in repos_data.items():\n                    patterns = await find_code_patterns(data[\"repo_path\"], pattern, repo)\n                    pattern_results.append({\"repo\": repo, \"patterns\": patterns})\n\n                table_lines = [\"| Repo | File | Line | Pattern | Code |\", \"|------|------|------|---------|------|\"]\n                for result in pattern_results:", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "\n                    for pattern in result[\"patterns\"]:\n                        table_lines.append(\n                            f\"| {result['repo']} | {pattern['file_path']} | {pattern['line']} | {pattern['pattern']} | {pattern['line_content'][:50]}... |\"\n                        )\n                patterns_text = f\"{pattern.capitalize()} Patterns Found:\\n\" + \"\\n\".join(table_lines) if table_lines[2:] else f\"No {pattern} patterns found.\"\n                await response_handler.emit_text_block(\"analy", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "sis\", patterns_text)\n                await message_db.store_message(activity_id_str, query.prompt, {\"repos\": list(repos_data.keys()), \"query\": query.prompt, \"response\": patterns_text}, current_time)\n                await response_handler.complete()\n                return\n\n            if not repos_data:\n                await response_handler.emit_text_block(\n                    \"status\",\n                    \"No repos indexed or default set. Please specify a repo (e.g., 'summarize github.com/palle", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "ts/flask') or set a default (e.g., 'set default github.com/pallets/flask').\"\n                )\n                await response_handler.complete()\n                return\n\n            current_repo = next(iter(repos_data))\n            index = repos_data[current_repo][\"index\"]\n            chunks = repos_data[current_repo][\"chunks\"]\n\n            query_emb = self.embedder.encode([query.prompt], show_progress_bar=False)\n            query_emb = np.array(query_emb).astype('float32')\n            _, indices", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": " = index.search(query_emb, k=5)\n            relevant_chunks = [chunks[i] for i in indices[0]]\n            formatted_chunks = format_all_chunks_for_llm(relevant_chunks)\n\n            history_string = format_interactions_for_llm(past_interactions)\n\n            llm_prompt = (\n                f\"Repo: {current_repo}\\n\"\n                f\"Relevant code chunks:\\n{formatted_chunks}\\n\\n\"\n                f\"Conversation history:\\n{history_string}\\n\\n\"\n                f\"User Query: {query.prompt}\\n\\n\"\n       ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "         \"Provide a clear, detailed analysis or summary based on the repo contents in a single cohesive response. \"\n                \"Use Markdown formatting with headings and lists for clarity. Limit to key insights.\"\n            )\n            try:\n                response = await async_client.chat.completions.create(\n                    model=\"qwen-72b\",\n                    messages=[{\"role\": \"user\", \"content\": llm_prompt}],\n                    max_tokens=600,\n                    stream=True\n  ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "              )\n                stream = response_handler.create_text_stream(\"analysis\")\n                buffer = \"\"\n                paragraph_threshold = 500  # Emit after ~500 chars or paragraph break\n                async for chunk in response:\n                    if chunk.choices and chunk.choices[0].delta.content:\n                        content = chunk.choices[0].delta.content\n                        buffer += content\n                        # Emit only on paragraph breaks (\\n\\n) or if buf", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "fer is large\n                        if \"\\n\\n\" in buffer or len(buffer) > paragraph_threshold:\n                            # Split on paragraph breaks and emit non-empty parts\n                            parts = buffer.split(\"\\n\\n\")\n                            for part in parts[:-1]:  # Process all but the last part\n                                if part.strip() and len(part.strip()) > 1:  # Skip empty or single-char parts\n                                    await stream.emit_chunk(part.strip()", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": ")\n                            buffer = parts[-1]  # Keep the last part in buffer\n                if buffer.strip() and len(buffer.strip()) > 1:  # Emit non-empty, non-trivial buffer\n                    await stream.emit_chunk(buffer.strip())\n                await stream.complete()\n            except Exception as e:\n                logger.error(f\"GaiaNet LLM failed: {str(e)}\")\n                await response_handler.emit_error(f\"Failed to generate analysis: {str(e)}\", 500)\n\n            repo_data =", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": " {\n                \"repo\": current_repo,\n                \"query\": query.prompt,\n                \"chunks_returned\": len(relevant_chunks),\n                \"response\": buffer\n            }\n            await message_db.store_message(activity_id_str, query.prompt, repo_data, current_time)\n\n            await response_handler.complete()\n\n            for repo, data in repos_data.items():\n                repo_path = data[\"repo_path\"]\n                if repo_path and os.path.exists(repo_path):\n           ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "         shutil.rmtree(repo_path, ignore_errors=True)\n                    logger.debug(f\"Cleaned up temporary repo directory: {repo_path}\")\n\n        except Exception as e:\n            logger.error(f\"RepoScope Agent failed: {str(e)}\", exc_info=True)\n            await response_handler.emit_error(\n                error_message=f\"RepoScope Agent failed: {str(e)}\",\n                details={\"error_type\": type(e).__name__}\n            )\n            await message_db.store_message(activity_id_str, query.", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\agent.py", "content": "prompt, None, current_time)\n            await response_handler.complete()\n", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\config.py", "content": "import os\nfrom dotenv import load_dotenv\nimport openai\n\nload_dotenv()\n\n# GaiaNet LLM configuration\nGAIA_API_KEY = os.getenv(\"GAIA_API_KEY\", \"gaia-ZWFlMGYwNmQtNGVmYS00YmU5LTg1NGUtNzFlOTM3NWU3YzU2-cFu80IEd7q0m2z7j\")\nGAIA_API_BASE = os.getenv(\"GAIA_API_BASE\", \"https://qwen72b.gaia.domains/v1\")\n\nasync_client = openai.AsyncOpenAI(\n    base_url=GAIA_API_BASE,\n    api_key=GAIA_API_KEY\n)\n\n# GitHub API base (no auth needed for public repos)\nGITHUB_API_BASE = \"https://api.github.com\"", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "import aiosqlite\nimport json\nimport logging\nfrom typing import List, Dict, Any, Optional\n\nlogger = logging.getLogger(__name__)\n\nclass MessageDatabase:\n    def __init__(self, db_path: str = \"reposcope_sessions.db\"):\n        self.db_path = db_path\n        # Initialize database at startup\n        import asyncio\n        asyncio.run(self.initialize())\n\n    async def initialize(self):\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                # Drop and recreate message", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "s table to ensure correct schema\n                await db.execute(\"DROP TABLE IF EXISTS messages\")\n                await db.execute(\"\"\"\n                    CREATE TABLE messages (\n                        session_id TEXT,\n                        prompt TEXT,\n                        repo_data TEXT,\n                        timestamp INTEGER\n                    )\n                \"\"\")\n                await db.execute(\"\"\"\n                    CREATE TABLE IF NOT EXISTS indexes (\n                       ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": " repo TEXT PRIMARY KEY,\n                        index_path TEXT,\n                        chunk_count INTEGER,\n                        timestamp INTEGER\n                    )\n                \"\"\")\n                await db.execute(\"\"\"\n                    CREATE TABLE IF NOT EXISTS function_calls (\n                        repo TEXT,\n                        file_path TEXT,\n                        caller TEXT,\n                        callee TEXT,\n                        line INTEGER,\n                 ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "       line_content TEXT,\n                        timestamp INTEGER\n                    )\n                \"\"\")\n                await db.execute(\"\"\"\n                    CREATE TABLE IF NOT EXISTS default_repo (\n                        session_id TEXT PRIMARY KEY,\n                        repo TEXT,\n                        timestamp INTEGER\n                    )\n                \"\"\")\n                await db.commit()\n                logger.debug(\"Database initialized successfully with updated schema", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "\")\n        except Exception as e:\n            logger.error(f\"Failed to initialize database: {str(e)}\")\n            raise\n\n    async def store_message(self, session_id: str, prompt: str, repo_data: Optional[Dict[str, Any]], timestamp: int):\n        try:\n            repo_data_json = json.dumps(repo_data) if repo_data else None\n            async with aiosqlite.connect(self.db_path) as db:\n                await db.execute(\n                    \"INSERT INTO messages (session_id, prompt, repo_data, tim", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "estamp) VALUES (?, ?, ?, ?)\",\n                    (session_id, prompt, repo_data_json, timestamp)\n                )\n                await db.commit()\n                logger.debug(f\"Stored message for session {session_id}: {prompt}\")\n        except Exception as e:\n            logger.error(f\"Failed to store message: {str(e)}\")\n            raise\n\n    async def retrieve_messages(self, session_id: str) -> List[Dict[str, Any]]:\n        try:\n            async with aiosqlite.connect(self.db_path) as db:", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "\n                cursor = await db.execute(\n                    \"SELECT prompt, repo_data, timestamp FROM messages WHERE session_id = ? ORDER BY timestamp ASC\",\n                    (session_id,)\n                )\n                rows = await cursor.fetchall()\n                messages = []\n                for row in rows:\n                    prompt, repo_data_json, timestamp = row\n                    repo_data = json.loads(repo_data_json) if repo_data_json else None\n                    messages.a", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "ppend({\"prompt\": prompt, \"repo_data\": repo_data, \"timestamp\": timestamp})\n                await cursor.close()\n                return messages\n        except Exception as e:\n            logger.error(f\"Failed to retrieve messages: {str(e)}\")\n            return []\n\n    async def store_index(self, repo: str, index_path: str, chunk_count: int, timestamp: int):\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                await db.execute(\n                    \"INSERT OR R", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "EPLACE INTO indexes (repo, index_path, chunk_count, timestamp) VALUES (?, ?, ?, ?)\",\n                    (repo, index_path, chunk_count, timestamp)\n                )\n                await db.commit()\n        except Exception as e:\n            logger.error(f\"Failed to store index: {str(e)}\")\n\n    async def retrieve_index(self, repo: str) -> Optional[Dict[str, Any]]:\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                cursor = await db.execute(\n              ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "      \"SELECT index_path, chunk_count, timestamp FROM indexes WHERE repo = ?\",\n                    (repo,)\n                )\n                row = await cursor.fetchone()\n                await cursor.close()\n                if row:\n                    return {\"index_path\": row[0], \"chunk_count\": row[1], \"timestamp\": row[2]}\n                return None\n        except Exception as e:\n            logger.error(f\"Failed to retrieve index: {str(e)}\")\n            return None\n\n    async def store_functi", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "on_calls(self, repo: str, calls: List[Dict[str, Any]], timestamp: int):\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                for call in calls:\n                    await db.execute(\n                        \"INSERT INTO function_calls (repo, file_path, caller, callee, line, line_content, timestamp) VALUES (?, ?, ?, ?, ?, ?, ?)\",\n                        (repo, call[\"file_path\"], call[\"caller\"], call[\"callee\"], call[\"line\"], call[\"line_content\"], timestamp)\n   ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "                 )\n                await db.commit()\n        except Exception as e:\n            logger.error(f\"Failed to store function calls: {str(e)}\")\n\n    async def retrieve_function_calls(self, repo: str, function_name: str = None) -> List[Dict[str, Any]]:\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                if function_name:\n                    cursor = await db.execute(\n                        \"SELECT file_path, caller, callee, line, line_content FROM", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": " function_calls WHERE repo = ? AND callee = ?\",\n                        (repo, function_name)\n                    )\n                else:\n                    cursor = await db.execute(\n                        \"SELECT file_path, caller, callee, line, line_content FROM function_calls WHERE repo = ?\",\n                        (repo,)\n                    )\n                rows = await cursor.fetchall()\n                calls = [\n                    {\"file_path\": row[0], \"caller\": row[1], \"callee\": row", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "[2], \"line\": row[3], \"line_content\": row[4]}\n                    for row in rows\n                ]\n                await cursor.close()\n                return calls\n        except Exception as e:\n            logger.error(f\"Failed to retrieve function calls: {str(e)}\")\n            return []\n\n    async def cleanup_session(self, session_id: str):\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                await db.execute(\"DELETE FROM messages WHERE session_id = ?\", (", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "session_id,))\n                await db.execute(\"DELETE FROM default_repo WHERE session_id = ?\", (session_id,))\n                await db.commit()\n        except Exception as e:\n            logger.error(f\"Failed to cleanup session {session_id}: {str(e)}\")\n\n    async def cleanup_index(self, repo: str):\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                await db.execute(\"DELETE FROM indexes WHERE repo = ?\", (repo,))\n                await db.execute(\"DELETE FRO", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "M function_calls WHERE repo = ?\", (repo,))\n                await db.commit()\n        except Exception as e:\n            logger.error(f\"Failed to cleanup index for {repo}: {str(e)}\")\n\n    async def set_default_repo(self, session_id: str, repo: str, timestamp: int):\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                await db.execute(\n                    \"INSERT OR REPLACE INTO default_repo (session_id, repo, timestamp) VALUES (?, ?, ?)\",\n                    ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "(session_id, repo, timestamp)\n                )\n                await db.commit()\n                logger.debug(f\"Set default repo {repo} for session {session_id}\")\n        except Exception as e:\n            logger.error(f\"Failed to set default repo: {str(e)}\")\n\n    async def get_default_repo(self, session_id: str) -> Optional[str]:\n        try:\n            async with aiosqlite.connect(self.db_path) as db:\n                cursor = await db.execute(\n                    \"SELECT repo FROM default_re", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\database.py", "content": "po WHERE session_id = ?\",\n                    (session_id,)\n                )\n                row = await cursor.fetchone()\n                await cursor.close()\n                return row[0] if row else None\n        except Exception as e:\n            logger.error(f\"Failed to get default repo: {str(e)}\")\n            return None", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\data_formatter.py", "content": "import json\nfrom typing import List, Dict, Any\n\ndef normalize_repo_chunk(chunk: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"\n    Cleans and standardizes a repo chunk for LLM consumption.\n    Ensures file path and content are included, truncates long content.\n    \"\"\"\n    chunk = {\n        \"file_path\": chunk.get(\"file_path\", \"unknown\"),\n        \"content\": chunk.get(\"content\", \"\")\n    }\n    \n    MAX_LENGTH = 500\n    if len(chunk[\"content\"]) > MAX_LENGTH:\n        chunk[\"content\"] = f\"[...content_trunc", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\data_formatter.py", "content": "ated... {len(chunk['content'])} chars. First {MAX_LENGTH} chars: {chunk['content'][:MAX_LENGTH]}]\"\n\n    return chunk\n\ndef format_all_chunks_for_llm(chunks: List[Dict[str, Any]]) -> str:\n    \"\"\"\n    Applies normalization to all repo chunks and formats them into a clean string for LLM input.\n    \"\"\"\n    normalized_chunks = [normalize_repo_chunk(chunk) for chunk in chunks]\n    formatted = \"\\n\\n\".join([f\"File: {chunk['file_path']}\\nContent:\\n{chunk['content']}\" for chunk in normalized_chunks])\n    r", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\data_formatter.py", "content": "eturn f\"--- REPO CHUNKS START ---\\n{formatted}\\n--- REPO CHUNKS END ---\"\n\ndef format_interactions_for_llm(interactions: List[Dict[str, Any]]) -> str:\n    \"\"\"\n    Formats conversation history into a string: [USER]: prompt \\n\\n [REPOSCOPE]: response.\n    \"\"\"\n    history_parts = []\n    \n    for interaction in interactions:\n        user_prompt = interaction.get(\"prompt\")\n        repo_data = interaction.get(\"repo_data\")\n        response = repo_data.get(\"response\") if repo_data else None\n\n        if u", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\data_formatter.py", "content": "ser_prompt:\n            history_parts.append(f\"[USER]: {user_prompt.strip()}\")\n        if response:\n            history_parts.append(f\"[REPOSCOPE]: {response.strip()}\")\n\n    return '\\n\\n'.join(history_parts)", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "import git\nimport os\nimport aiohttp\nimport logging\nimport shutil\nimport tempfile\nfrom typing import List, Dict, Any\nfrom config import GITHUB_API_BASE\nfrom tree_sitter import Language, Parser, Query\nimport tree_sitter_python as tspython\nimport tree_sitter_javascript as tsjavascript\nfrom pylint.lint import Run\nfrom pylint.reporters.text import TextReporter\nfrom io import StringIO\nimport re\n\nlogger = logging.getLogger(__name__)\n\ntry:\n    PY_LANGUAGE = Language(tspython.language())\n    JS_LANGUAGE ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "= Language(tsjavascript.language())\n    py_parser = Parser(PY_LANGUAGE)\n    js_parser = Parser(JS_LANGUAGE)\n    logger.debug(\"tree-sitter initialized for Python and JavaScript\")\nexcept Exception as e:\n    logger.error(f\"tree-sitter initialization failed: {str(e)}. Falling back to regex parsing.\")\n    py_parser = None\n    js_parser = None\n\nasync def clone_repo(repo_url: str, repo_path: str) -> None:\n    \"\"\"Clone a GitHub repo to a local path (full clone).\"\"\"\n    try:\n        repo_path = os.path.j", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "oin(tempfile.gettempdir(), os.path.basename(repo_path))\n        if os.path.exists(repo_path):\n            shutil.rmtree(repo_path, ignore_errors=True)\n        git.Repo.clone_from(repo_url, repo_path)\n        logger.debug(f\"Cloned repo to {repo_path}\")\n    except Exception as e:\n        logger.error(f\"Failed to clone repo {repo_url}: {str(e)}\")\n        raise\n\nasync def fetch_repo_files(repo_path: str) -> List[Dict[str, str]]:\n    \"\"\"Read files from a cloned repo, returning file paths and contents", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": ".\"\"\"\n    files = []\n    for root, _, filenames in os.walk(repo_path):\n        for filename in filenames:\n            if filename.endswith(('.py', '.js', '.java', '.md', '.txt')):\n                file_path = os.path.join(root, filename)\n                try:\n                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n                        content = f.read()\n                    files.append({\"file_path\": file_path, \"content\": content})\n                    logger.debug(f", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "\"Fetched file: {file_path}\")\n                except Exception as e:\n                    logger.error(f\"Failed to read file {file_path}: {str(e)}\")\n    return files\n\nasync def count_lines_of_code(repo_path: str) -> Dict[str, Any]:\n    \"\"\"Count lines of code in a repo, categorized by file type.\"\"\"\n    total_lines = 0\n    python_lines = 0\n    js_lines = 0\n    other_lines = 0\n    python_files = 0\n    js_files = 0\n    other_files = 0\n\n    for root, _, filenames in os.walk(repo_path):\n        for file", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "name in filenames:\n            if filename.endswith(('.py', '.js', '.java', '.md', '.txt')):\n                file_path = os.path.join(root, filename)\n                try:\n                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n                        lines = len(f.read().splitlines())\n                    total_lines += lines\n                    if filename.endswith('.py'):\n                        python_lines += lines\n                        python_files += 1\n     ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "               elif filename.endswith('.js'):\n                        js_lines += lines\n                        js_files += 1\n                    else:\n                        other_lines += lines\n                        other_files += 1\n                except Exception as e:\n                    logger.error(f\"Failed to count lines in {file_path}: {str(e)}\")\n    return {\n        \"total_lines\": total_lines,\n        \"python_lines\": python_lines,\n        \"python_files\": python_files,\n        \"js_li", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "nes\": js_lines,\n        \"js_files\": js_files,\n        \"other_lines\": other_lines,\n        \"other_files\": other_files\n    }\n\nasync def parse_function_calls(repo_path: str, repo_name: str = None) -> List[Dict[str, Any]]:\n    \"\"\"Parse Python and JavaScript files for function definitions and calls.\"\"\"\n    if not repo_name:\n        logger.warning(\"No repo_name provided to parse_function_calls. Using default 'unknown_repo'.\")\n        repo_name = \"unknown_repo\"\n    function_calls = []\n    for root, _, ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "filenames in os.walk(repo_path):\n        for filename in filenames:\n            if filename.endswith(('.py', '.js')):\n                file_path = os.path.join(root, filename)\n                try:\n                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n                        content = f.read()\n                    parser = py_parser if filename.endswith('.py') else js_parser\n                    language = PY_LANGUAGE if filename.endswith('.py') else JS_LANGUAGE\n    ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "                if parser:\n                        tree = parser.parse(content.encode('utf-8'))\n                        function_calls.extend(extract_functions_and_calls(tree, file_path, content, repo_name, language))\n                    else:\n                        logger.warning(f\"Using regex fallback for {file_path} due to tree-sitter failure.\")\n                        function_calls.extend(extract_functions_and_calls_regex(file_path, content, repo_name))\n                except Exception as ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "e:\n                    logger.error(f\"Failed to parse file {file_path}: {str(e)}\")\n    return function_calls\n\ndef extract_functions_and_calls(tree, file_path: str, content: str, repo_name: str, language: Language) -> List[Dict[str, Any]]:\n    \"\"\"Extract function definitions and calls from a tree-sitter parse tree.\"\"\"\n    calls = []\n    lines = content.splitlines()\n\n    def get_text(node):\n        start = node.start_byte\n        end = node.end_byte\n        return content[start:end]\n\n    def trave", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "rse(node, current_function=None):\n        node_type = 'function_definition' if language == PY_LANGUAGE else 'function_declaration'\n        call_type = 'call' if language == PY_LANGUAGE else 'call_expression'\n        if node.type == node_type:\n            func_name = node.child_by_field_name('name')\n            if func_name:\n                current_function = get_text(func_name)\n        elif node.type == call_type:\n            func_node = node.child_by_field_name('function')\n            if func_n", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "ode:\n                called_func_full = get_text(func_node)\n                called_func = called_func_full.split('.')[-1]\n                start_line = node.start_point[0]\n                line_content = lines[start_line] if start_line < len(lines) else \"\"\n                calls.append({\n                    \"file_path\": file_path,\n                    \"caller\": current_function,\n                    \"callee\": called_func,\n                    \"line\": start_line + 1,\n                    \"line_content\":", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": " line_content.strip(),\n                    \"repo\": repo_name\n                })\n        for child in node.children:\n            traverse(child, current_function)\n\n    traverse(tree.root_node)\n    return calls\n\ndef extract_functions_and_calls_regex(file_path: str, content: str, repo_name: str) -> List[Dict[str, Any]]:\n    \"\"\"Fallback: Extract function calls using regex (less accurate).\"\"\"\n    calls = []\n    lines = content.splitlines()\n    current_function = None\n    func_def_pattern = re.compile", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "(r'^\\s*(def|function)\\s+([a-zA-Z_]\\w*)\\s*\\(', re.MULTILINE)\n    func_call_pattern = re.compile(r'([a-zA-Z_]\\w*)\\s*\\(', re.MULTILINE)\n\n    for i, line in enumerate(lines):\n        def_match = func_def_pattern.match(line)\n        if def_match:\n            current_function = def_match.group(2)\n            continue\n        call_matches = func_call_pattern.finditer(line)\n        for match in call_matches:\n            called_func = match.group(1)\n            calls.append({\n                \"file_path\":", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": " file_path,\n                \"caller\": current_function,\n                \"callee\": called_func,\n                \"line\": i + 1,\n                \"line_content\": line.strip(),\n                \"repo\": repo_name\n            })\n    return calls\n\nasync def find_code_patterns(repo_path: str, pattern: str, repo_name: str = None) -> List[Dict[str, Any]]:\n    \"\"\"Search for code patterns (e.g., try-except, try-catch) in Python and JavaScript files.\"\"\"\n    if not repo_name:\n        repo_name = \"unknown_repo\"\n", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "    matches = []\n    py_query = \"\"\"\n    (try_statement\n        block: (block) @try_block\n        (except_clause)* @except_clause)\n    (try_statement\n        block: (block) @try_block\n        except_clause: (except_clause\n            (identifier)? @exception))\n    \"\"\"\n    js_query = \"\"\"\n    (try_statement\n        block: (statement_block) @try_block\n        (catch_clause)* @catch_clause)\n    (try_statement\n        block: (statement_block) @try_block\n        catch_clause: (catch_clause\n            ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "(identifier)? @exception))\n    \"\"\"\n\n    for root, _, filenames in os.walk(repo_path):\n        for filename in filenames:\n            if filename.endswith(('.py', '.js')):\n                file_path = os.path.join(root, filename)\n                try:\n                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n                        content = f.read()\n                    parser = py_parser if filename.endswith('.py') else js_parser\n                    language = PY_LANGU", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "AGE if filename.endswith('.py') else JS_LANGUAGE\n                    query = py_query if filename.endswith('.py') else js_query\n                    if parser and pattern in ('try-except', 'try-catch'):\n                        tree = parser.parse(content.encode('utf-8'))\n                        query_obj = Query(language, query)\n                        captures = query_obj.captures(tree.root_node)\n                        lines = content.splitlines()\n                        for capture in captures", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": ":\n                            node, name = capture\n                            start_line = node.start_point[0]\n                            line_content = lines[start_line] if start_line < len(lines) else \"\"\n                            matches.append({\n                                \"file_path\": file_path,\n                                \"pattern\": pattern,\n                                \"line\": start_line + 1,\n                                \"line_content\": line_content.strip(),\n             ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "                   \"repo\": repo_name\n                            })\n                        logger.debug(f\"Searched {file_path} for {pattern}: found {len(captures)} matches\")\n                        if captures:\n                            logger.info(f\"Found {pattern} in {file_path}: {[lines[node.start_point[0]].strip() for node, _ in captures]}\")\n                    else:\n                        pattern_re = re.compile(r'\\btry\\b.*?\\bexcept\\b' if filename.endswith('.py') else r'\\btry\\b.*?\\bcatc", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "h\\b', re.DOTALL)\n                        for match in pattern_re.finditer(content):\n                            start_line = content[:match.start()].count('\\n') + 1\n                            line_content = content[match.start():match.end()].split('\\n')[0]\n                            matches.append({\n                                \"file_path\": file_path,\n                                \"pattern\": pattern,\n                                \"line\": start_line,\n                                \"line", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "_content\": line_content.strip(),\n                                \"repo\": repo_name\n                            })\n                        logger.debug(f\"Searched {file_path} for {pattern} with regex: found {len(pattern_re.findall(content))} matches\")\n                        if pattern_re.findall(content):\n                            logger.info(f\"Found {pattern} (regex) in {file_path}: {pattern_re.findall(content)[0][:50]}...\")\n                except Exception as e:\n                    logger.er", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "ror(f\"Failed to search patterns in {file_path}: {str(e)}\")\n    return matches\n\nasync def run_pylint(repo_path: str, repo_name: str = None) -> List[Dict[str, Any]]:\n    \"\"\"Run pylint on Python files in the repo and collect issues.\"\"\"\n    if not repo_name:\n        repo_name = \"unknown_repo\"\n    issues = []\n    output = StringIO()\n    reporter = TextReporter(output=output)\n\n    for root, _, filenames in os.walk(repo_path):\n        for filename in filenames:\n            if filename.endswith('.py'):\n", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "                file_path = os.path.join(root, filename)\n                try:\n                    Run([file_path, '--disable=missing-module-docstring,missing-class-docstring,missing-function-docstring'], reporter=reporter, do_exit=False)\n                    output.seek(0)\n                    lines = output.readlines()\n                    for line in lines:\n                        match = re.match(r'(.+):(\\d+):(\\d+): (\\w+): (.+)', line.strip())\n                        if match:\n                  ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "          file_path, line_num, _, issue_code, message = match.groups()\n                            issues.append({\n                                \"file_path\": file_path,\n                                \"line\": int(line_num),\n                                \"issue_code\": issue_code,\n                                \"message\": message,\n                                \"repo\": repo_name\n                            })\n                    output.truncate(0)\n                    output.seek(0)\n         ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\github_adapter.py", "content": "       except Exception as e:\n                    logger.error(f\"Failed to run pylint on {file_path}: {str(e)}\")\n    return issues", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\server.py", "content": "from sentient_agent_framework import DefaultServer\nfrom agent import RepoScopeAgent\n\nif __name__ == \"__main__\":\n    agent = RepoScopeAgent()\n    server = DefaultServer(agent=agent)\n    print(\"\ud83d\ude80 RepoScope server running at http://127.0.0.1:8000\")\n    server.run()", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "import asyncio\nimport aiohttp\nimport ulid\nimport json\nimport logging\nfrom typing import Dict\n\nlogging.basicConfig(level=logging.INFO, handlers=[\n    logging.FileHandler(\"test.log\"),\n])\nlogger = logging.getLogger(__name__)\nrequest_id = \"01K6BEPKY12FMR1S19Y3SE01C6\"\nquery_id = \"01K6BEMZ2QZQ58ADNDCKBPKD51\"\nactivity_id = \"01K6BEMNWZFMP3RMGJTFZBND2N\"\n\nasync def send_request(session: aiohttp.ClientSession, url: str, activity_id: str, prompt: str) -> None:\n    \"\"\"\n    Sends a single request to the RepoS", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "copeAgent server and processes the SSE response.\n    \"\"\"\n    \n\n    payload = {\n        \"session\": {\n            \"processor_id\": \"reposcope-test-client\",\n            \"activity_id\": activity_id,\n            \"request_id\": request_id,\n            \"interactions\": []\n        },\n        \"query\": {\n            \"id\": query_id,\n            \"prompt\": prompt,\n            \"context\": \"\"\n        }\n    }\n\n    print(f\"\\n=== Sending Prompt: {prompt} ===\")\n    try:\n        async with session.post(url, json=payload", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": ") as resp:\n            if resp.status != 200:\n                print(f\"\u274c Server responded with status {resp.status}\")\n                text = await resp.text()\n                print(\"Server response content:\", text)\n                logger.error(f\"Server error: status={resp.status}, content={text}\")\n                return\n\n            current_event = None\n            last_chunk_event = None\n            async for line in resp.content:\n                line = line.decode('utf-8').strip()\n             ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "   if line.startswith(\"event:\"):\n                    current_event = line[6:].strip()\n                    if not current_event.endswith(\"_CHUNK\") or current_event != last_chunk_event:\n                        print(f\"\\n--- \ud83d\udcdd Block Received: {current_event} ---\")\n                        logger.debug(f\"Received event: {current_event}\")\n                        last_chunk_event = current_event if current_event.endswith(\"_CHUNK\") else None\n                elif line.startswith(\"data:\") and current_even", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "t:\n                    try:\n                        data = json.loads(line[5:].strip())\n                        if 'content' in data:\n                            print(data['content'], end='', flush=True)\n                            logger.debug(f\"Received data content: {data['content']}\")\n                        elif data.get('event') == 'complete':\n                            print(f\"\\n\\n--- \u2705 {current_event} COMPLETE ---\")\n                            logger.debug(f\"Event {current_event} compl", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "eted\")\n                            current_event = None\n                            last_chunk_event = None\n                        elif data.get('event') == 'error':\n                            print(f\"\\n\u274c Error: {data.get('error_message', 'Unknown error')}\")\n                            logger.error(f\"Server error event: {data}\")\n                    except json.JSONDecodeError as e:\n                        logger.error(f\"Failed to parse SSE data: {line}, error: {str(e)}\")\n                      ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "  print(f\"\\n\u274c Invalid SSE data: {line}\")\n    except aiohttp.ClientConnectorError as e:\n        print(f\"\u274c Could not connect to the server: {e}\")\n        print(\"Please ensure your server.py is running on http://127.0.0.1:8000.\")\n        logger.error(f\"Connection error: {str(e)}\")\n\nasync def run_test_suite():\n    \"\"\"\n    Runs a predefined suite of test prompts to verify RepoScopeAgent functionality.\n    \"\"\"\n    url = \"http://127.0.0.1:8000/assist\"\n    test_prompts = [\n        \"set default github.co", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "m/pallets/flask\",\n    ]\n\n    print(f\"\\n=== Starting RepoScopeAgent Test Suite (Session ID: {activity_id}) ===\")\n    async with aiohttp.ClientSession() as session:\n        for prompt in test_prompts:\n            await send_request(session, url, activity_id, prompt)\n            await asyncio.sleep(2)  # Avoid overwhelming the server\n        print(\"\\n=== Test Suite Completed ===\")\n\nasync def interactive_chat():\n    \"\"\"\n    Runs an interactive chat session, allowing continuous user input until 'exit", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "' or 'quit'.\n    \"\"\"\n    url = \"http://127.0.0.1:8000/assist\"\n    print(f\"\\n=== Starting RepoScopeAgent Chat (Session ID: {activity_id}) ===\")\n    print(\"Type your prompt (e.g., 'set default github.com/pallets/flask' or 'exit' to quit):\")\n\n    async with aiohttp.ClientSession() as session:\n        while True:\n            prompt = input(\"> \").strip()\n            if prompt.lower() in [\"exit\", \"quit\"]:\n                await send_request(session, url, activity_id, \"exit chat\")\n                print(", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\test.py", "content": "\"Chat session ended. Session data cleared.\")\n                break\n            if not prompt:\n                print(\"Please enter a valid prompt or type 'exit' to quit.\")\n                continue\n            await send_request(session, url, activity_id, prompt)\n            await asyncio.sleep(1)  # Avoid overwhelming the server\n\nif __name__ == \"__main__\":\n    asyncio.run(run_test_suite())\n    asyncio.run(interactive_chat())", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\notforedit\\build_languages.py", "content": "import os\nimport subprocess\nimport shutil\nfrom tree_sitter import Language\n\ndef build_tree_sitter_library():\n    grammar_path = 'vendor/tree-sitter-python'\n    output_path = 'build/my-languages.dll' if os.name == 'nt' else 'build/my-languages.so'\n    \n    # Ensure build directory exists\n    os.makedirs('build', exist_ok=True)\n    \n    # Verify grammar directory\n    if not os.path.exists(grammar_path):\n        print(f\"Error: {grammar_path} does not exist. Run: git clone https://github.com/tree-si", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\notforedit\\build_languages.py", "content": "tter/tree-sitter-python {grammar_path}\")\n        return False\n    \n    # Run tree-sitter generate\n    try:\n        subprocess.run(['npx', 'tree-sitter', 'generate'], cwd=grammar_path, check=True, shell=True)\n        print(f\"Generated grammar in {grammar_path}\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to generate grammar: {str(e)}\")\n        print(\"Ensure tree-sitter-cli is installed (npm install -g tree-sitter-cli) and in PATH.\")\n        return False\n    except FileN", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\notforedit\\build_languages.py", "content": "otFoundError:\n        print(\"Error: npx or tree-sitter not found. Ensure Node.js and tree-sitter-cli are installed.\")\n        return False\n    \n    # Try building with Language.build_library\n    try:\n        Language.build_library(output_path, [grammar_path])\n        print(f\"Successfully built {output_path}\")\n        return True\n    except AttributeError:\n        print(\"Language.build_library not available. Attempting manual compilation...\")\n    \n    # Manual compilation with cl.exe (Windows)\n  ", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\notforedit\\build_languages.py", "content": "  if os.name == 'nt':\n        try:\n            cl_exe = 'cl'\n            # Check if cl.exe is available\n            if not shutil.which(cl_exe):\n                print(\"Error: cl.exe not found. Ensure Visual C++ Build Tools are installed and in PATH.\")\n                return False\n            src_path = os.path.join(grammar_path, 'src')\n            parser_c = os.path.join(src_path, 'parser.c')\n            scanner_c = os.path.join(src_path, 'scanner.c') if os.path.exists(os.path.join(src_path, 'sc", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\notforedit\\build_languages.py", "content": "anner.c')) else None\n            cmd = [cl_exe, '/LD', '/I', src_path, parser_c]\n            if scanner_c:\n                cmd.append(scanner_c)\n            cmd.append('/link')\n            cmd.append(f'/OUT:{output_path}')\n            subprocess.run(cmd, check=True, shell=True)\n            print(f\"Manually compiled {output_path}\")\n            return True\n        except subprocess.CalledProcessError as e:\n            print(f\"Manual compilation failed: {str(e)}\")\n            print(\"Ensure Visual C", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\notforedit\\build_languages.py", "content": "++ Build Tools are installed and cl.exe is in PATH.\")\n            return False\n        except Exception as e:\n            print(f\"Unexpected error during compilation: {str(e)}\")\n            return False\n    else:\n        # Unix: Use gcc\n        try:\n            gcc = 'gcc'\n            src_path = os.path.join(grammar_path, 'src')\n            parser_c = os.path.join(src_path, 'parser.c')\n            scanner_c = os.path.join(src_path, 'scanner.c') if os.path.exists(os.path.join(src_path, 'scanner.c", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\notforedit\\build_languages.py", "content": "')) else None\n            cmd = [gcc, '-shared', '-o', output_path, '-I', src_path, parser_c]\n            if scanner_c:\n                cmd.append(scanner_c)\n            subprocess.run(cmd, check=True, shell=True)\n            print(f\"Manually compiled {output_path}\")\n            return True\n        except subprocess.CalledProcessError as e:\n            print(f\"Manual compilation failed: {str(e)}\")\n            return False\n\nif __name__ == \"__main__\":\n    if build_tree_sitter_library():\n        pr", "repo": "MAYANK-MAHAUR/reposcope"}, {"file_path": "C:\\Users\\hp\\AppData\\Local\\Temp\\MAYANK-MAHAUR_reposcope\\notforedit\\build_languages.py", "content": "int(\"Tree-sitter setup complete. You can now run the RepoScope agent.\")\n    else:\n        print(\"Tree-sitter setup failed. The agent will use regex-based parsing as a fallback.\")", "repo": "MAYANK-MAHAUR/reposcope"}]